/* AUTOGENERATED FILE. DO NOT EDIT. */
#include <string.h>
#include <stdlib.h>
#include <setjmp.h>
#include "cmock.h"
#include "mock_sysctl.h"

static const char* CMockString_SysCtlAltClkConfig = "SysCtlAltClkConfig";
static const char* CMockString_SysCtlBrownOutConfigSet = "SysCtlBrownOutConfigSet";
static const char* CMockString_SysCtlClkVerificationClear = "SysCtlClkVerificationClear";
static const char* CMockString_SysCtlClockFreqSet = "SysCtlClockFreqSet";
static const char* CMockString_SysCtlClockGet = "SysCtlClockGet";
static const char* CMockString_SysCtlClockOutConfig = "SysCtlClockOutConfig";
static const char* CMockString_SysCtlClockSet = "SysCtlClockSet";
static const char* CMockString_SysCtlDeepSleep = "SysCtlDeepSleep";
static const char* CMockString_SysCtlDeepSleepClockConfigSet = "SysCtlDeepSleepClockConfigSet";
static const char* CMockString_SysCtlDeepSleepClockSet = "SysCtlDeepSleepClockSet";
static const char* CMockString_SysCtlDeepSleepPowerSet = "SysCtlDeepSleepPowerSet";
static const char* CMockString_SysCtlDelay = "SysCtlDelay";
static const char* CMockString_SysCtlFlashSectorSizeGet = "SysCtlFlashSectorSizeGet";
static const char* CMockString_SysCtlFlashSizeGet = "SysCtlFlashSizeGet";
static const char* CMockString_SysCtlGPIOAHBDisable = "SysCtlGPIOAHBDisable";
static const char* CMockString_SysCtlGPIOAHBEnable = "SysCtlGPIOAHBEnable";
static const char* CMockString_SysCtlIOSCVerificationSet = "SysCtlIOSCVerificationSet";
static const char* CMockString_SysCtlIntClear = "SysCtlIntClear";
static const char* CMockString_SysCtlIntDisable = "SysCtlIntDisable";
static const char* CMockString_SysCtlIntEnable = "SysCtlIntEnable";
static const char* CMockString_SysCtlIntRegister = "SysCtlIntRegister";
static const char* CMockString_SysCtlIntStatus = "SysCtlIntStatus";
static const char* CMockString_SysCtlIntUnregister = "SysCtlIntUnregister";
static const char* CMockString_SysCtlLDODeepSleepGet = "SysCtlLDODeepSleepGet";
static const char* CMockString_SysCtlLDODeepSleepSet = "SysCtlLDODeepSleepSet";
static const char* CMockString_SysCtlLDOSleepGet = "SysCtlLDOSleepGet";
static const char* CMockString_SysCtlLDOSleepSet = "SysCtlLDOSleepSet";
static const char* CMockString_SysCtlMOSCConfigSet = "SysCtlMOSCConfigSet";
static const char* CMockString_SysCtlMOSCVerificationSet = "SysCtlMOSCVerificationSet";
static const char* CMockString_SysCtlNMIClear = "SysCtlNMIClear";
static const char* CMockString_SysCtlNMIStatus = "SysCtlNMIStatus";
static const char* CMockString_SysCtlPIOSCCalibrate = "SysCtlPIOSCCalibrate";
static const char* CMockString_SysCtlPLLVerificationSet = "SysCtlPLLVerificationSet";
static const char* CMockString_SysCtlPWMClockGet = "SysCtlPWMClockGet";
static const char* CMockString_SysCtlPWMClockSet = "SysCtlPWMClockSet";
static const char* CMockString_SysCtlPeripheralClockGating = "SysCtlPeripheralClockGating";
static const char* CMockString_SysCtlPeripheralDeepSleepDisable = "SysCtlPeripheralDeepSleepDisable";
static const char* CMockString_SysCtlPeripheralDeepSleepEnable = "SysCtlPeripheralDeepSleepEnable";
static const char* CMockString_SysCtlPeripheralDisable = "SysCtlPeripheralDisable";
static const char* CMockString_SysCtlPeripheralEnable = "SysCtlPeripheralEnable";
static const char* CMockString_SysCtlPeripheralPowerOff = "SysCtlPeripheralPowerOff";
static const char* CMockString_SysCtlPeripheralPowerOn = "SysCtlPeripheralPowerOn";
static const char* CMockString_SysCtlPeripheralPresent = "SysCtlPeripheralPresent";
static const char* CMockString_SysCtlPeripheralReady = "SysCtlPeripheralReady";
static const char* CMockString_SysCtlPeripheralReset = "SysCtlPeripheralReset";
static const char* CMockString_SysCtlPeripheralSleepDisable = "SysCtlPeripheralSleepDisable";
static const char* CMockString_SysCtlPeripheralSleepEnable = "SysCtlPeripheralSleepEnable";
static const char* CMockString_SysCtlReset = "SysCtlReset";
static const char* CMockString_SysCtlResetBehaviorGet = "SysCtlResetBehaviorGet";
static const char* CMockString_SysCtlResetBehaviorSet = "SysCtlResetBehaviorSet";
static const char* CMockString_SysCtlResetCauseClear = "SysCtlResetCauseClear";
static const char* CMockString_SysCtlResetCauseGet = "SysCtlResetCauseGet";
static const char* CMockString_SysCtlSRAMSizeGet = "SysCtlSRAMSizeGet";
static const char* CMockString_SysCtlSleep = "SysCtlSleep";
static const char* CMockString_SysCtlSleepPowerSet = "SysCtlSleepPowerSet";
static const char* CMockString_SysCtlUSBPLLDisable = "SysCtlUSBPLLDisable";
static const char* CMockString_SysCtlUSBPLLEnable = "SysCtlUSBPLLEnable";
static const char* CMockString_SysCtlVCOGet = "SysCtlVCOGet";
static const char* CMockString_SysCtlVoltageEventClear = "SysCtlVoltageEventClear";
static const char* CMockString_SysCtlVoltageEventConfig = "SysCtlVoltageEventConfig";
static const char* CMockString_SysCtlVoltageEventStatus = "SysCtlVoltageEventStatus";
static const char* CMockString_bEnable = "bEnable";
static const char* CMockString_bMasked = "bMasked";
static const char* CMockString_pfnHandler = "pfnHandler";
static const char* CMockString_pui32VCOFrequency = "pui32VCOFrequency";
static const char* CMockString_ui32Behavior = "ui32Behavior";
static const char* CMockString_ui32Causes = "ui32Causes";
static const char* CMockString_ui32Config = "ui32Config";
static const char* CMockString_ui32Count = "ui32Count";
static const char* CMockString_ui32Crystal = "ui32Crystal";
static const char* CMockString_ui32Delay = "ui32Delay";
static const char* CMockString_ui32Div = "ui32Div";
static const char* CMockString_ui32GPIOPeripheral = "ui32GPIOPeripheral";
static const char* CMockString_ui32Ints = "ui32Ints";
static const char* CMockString_ui32Peripheral = "ui32Peripheral";
static const char* CMockString_ui32Status = "ui32Status";
static const char* CMockString_ui32SysClock = "ui32SysClock";
static const char* CMockString_ui32Type = "ui32Type";
static const char* CMockString_ui32Voltage = "ui32Voltage";

typedef struct _CMOCK_SysCtlSRAMSizeGet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  uint32_t ReturnVal;
  int CallOrder;

} CMOCK_SysCtlSRAMSizeGet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlFlashSizeGet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  uint32_t ReturnVal;
  int CallOrder;

} CMOCK_SysCtlFlashSizeGet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlFlashSectorSizeGet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  uint32_t ReturnVal;
  int CallOrder;

} CMOCK_SysCtlFlashSectorSizeGet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPeripheralPresent_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  bool ReturnVal;
  int CallOrder;
  uint32_t Expected_ui32Peripheral;

} CMOCK_SysCtlPeripheralPresent_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPeripheralReady_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  bool ReturnVal;
  int CallOrder;
  uint32_t Expected_ui32Peripheral;

} CMOCK_SysCtlPeripheralReady_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPeripheralPowerOn_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Peripheral;

} CMOCK_SysCtlPeripheralPowerOn_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPeripheralPowerOff_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Peripheral;

} CMOCK_SysCtlPeripheralPowerOff_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPeripheralReset_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Peripheral;

} CMOCK_SysCtlPeripheralReset_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPeripheralEnable_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Peripheral;

} CMOCK_SysCtlPeripheralEnable_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPeripheralDisable_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Peripheral;

} CMOCK_SysCtlPeripheralDisable_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPeripheralSleepEnable_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Peripheral;

} CMOCK_SysCtlPeripheralSleepEnable_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPeripheralSleepDisable_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Peripheral;

} CMOCK_SysCtlPeripheralSleepDisable_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPeripheralDeepSleepEnable_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Peripheral;

} CMOCK_SysCtlPeripheralDeepSleepEnable_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPeripheralDeepSleepDisable_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Peripheral;

} CMOCK_SysCtlPeripheralDeepSleepDisable_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPeripheralClockGating_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  bool Expected_bEnable;

} CMOCK_SysCtlPeripheralClockGating_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlIntRegister_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  cmock_sysctl_func_ptr1 Expected_pfnHandler;

} CMOCK_SysCtlIntRegister_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlIntUnregister_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;

} CMOCK_SysCtlIntUnregister_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlIntEnable_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Ints;

} CMOCK_SysCtlIntEnable_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlIntDisable_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Ints;

} CMOCK_SysCtlIntDisable_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlIntClear_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Ints;

} CMOCK_SysCtlIntClear_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlIntStatus_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  uint32_t ReturnVal;
  int CallOrder;
  bool Expected_bMasked;

} CMOCK_SysCtlIntStatus_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlLDOSleepSet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Voltage;

} CMOCK_SysCtlLDOSleepSet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlLDOSleepGet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  uint32_t ReturnVal;
  int CallOrder;

} CMOCK_SysCtlLDOSleepGet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlLDODeepSleepSet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Voltage;

} CMOCK_SysCtlLDODeepSleepSet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlLDODeepSleepGet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  uint32_t ReturnVal;
  int CallOrder;

} CMOCK_SysCtlLDODeepSleepGet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlSleepPowerSet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Config;

} CMOCK_SysCtlSleepPowerSet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlDeepSleepPowerSet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Config;

} CMOCK_SysCtlDeepSleepPowerSet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlReset_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;

} CMOCK_SysCtlReset_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlSleep_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;

} CMOCK_SysCtlSleep_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlDeepSleep_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;

} CMOCK_SysCtlDeepSleep_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlResetCauseGet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  uint32_t ReturnVal;
  int CallOrder;

} CMOCK_SysCtlResetCauseGet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlResetCauseClear_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Causes;

} CMOCK_SysCtlResetCauseClear_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlBrownOutConfigSet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Config;
  uint32_t Expected_ui32Delay;

} CMOCK_SysCtlBrownOutConfigSet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlDelay_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Count;

} CMOCK_SysCtlDelay_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlMOSCConfigSet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Config;

} CMOCK_SysCtlMOSCConfigSet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPIOSCCalibrate_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  uint32_t ReturnVal;
  int CallOrder;
  uint32_t Expected_ui32Type;

} CMOCK_SysCtlPIOSCCalibrate_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlClockSet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Config;

} CMOCK_SysCtlClockSet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlClockGet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  uint32_t ReturnVal;
  int CallOrder;

} CMOCK_SysCtlClockGet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlDeepSleepClockSet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Config;

} CMOCK_SysCtlDeepSleepClockSet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlDeepSleepClockConfigSet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Div;
  uint32_t Expected_ui32Config;

} CMOCK_SysCtlDeepSleepClockConfigSet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPWMClockSet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Config;

} CMOCK_SysCtlPWMClockSet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPWMClockGet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  uint32_t ReturnVal;
  int CallOrder;

} CMOCK_SysCtlPWMClockGet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlIOSCVerificationSet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  bool Expected_bEnable;

} CMOCK_SysCtlIOSCVerificationSet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlMOSCVerificationSet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  bool Expected_bEnable;

} CMOCK_SysCtlMOSCVerificationSet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlPLLVerificationSet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  bool Expected_bEnable;

} CMOCK_SysCtlPLLVerificationSet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlClkVerificationClear_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;

} CMOCK_SysCtlClkVerificationClear_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlGPIOAHBEnable_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32GPIOPeripheral;

} CMOCK_SysCtlGPIOAHBEnable_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlGPIOAHBDisable_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32GPIOPeripheral;

} CMOCK_SysCtlGPIOAHBDisable_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlUSBPLLEnable_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;

} CMOCK_SysCtlUSBPLLEnable_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlUSBPLLDisable_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;

} CMOCK_SysCtlUSBPLLDisable_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlClockFreqSet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  uint32_t ReturnVal;
  int CallOrder;
  uint32_t Expected_ui32Config;
  uint32_t Expected_ui32SysClock;

} CMOCK_SysCtlClockFreqSet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlResetBehaviorSet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Behavior;

} CMOCK_SysCtlResetBehaviorSet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlResetBehaviorGet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  uint32_t ReturnVal;
  int CallOrder;

} CMOCK_SysCtlResetBehaviorGet_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlClockOutConfig_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Config;
  uint32_t Expected_ui32Div;

} CMOCK_SysCtlClockOutConfig_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlAltClkConfig_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Config;

} CMOCK_SysCtlAltClkConfig_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlNMIStatus_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  uint32_t ReturnVal;
  int CallOrder;

} CMOCK_SysCtlNMIStatus_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlNMIClear_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Status;

} CMOCK_SysCtlNMIClear_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlVoltageEventConfig_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Config;

} CMOCK_SysCtlVoltageEventConfig_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlVoltageEventStatus_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  uint32_t ReturnVal;
  int CallOrder;

} CMOCK_SysCtlVoltageEventStatus_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlVoltageEventClear_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  int CallOrder;
  uint32_t Expected_ui32Status;

} CMOCK_SysCtlVoltageEventClear_CALL_INSTANCE;

typedef struct _CMOCK_SysCtlVCOGet_CALL_INSTANCE
{
  UNITY_LINE_TYPE LineNumber;
  bool ReturnVal;
  int CallOrder;
  uint32_t Expected_ui32Crystal;
  uint32_t* Expected_pui32VCOFrequency;

} CMOCK_SysCtlVCOGet_CALL_INSTANCE;

static struct mock_sysctlInstance
{
  char SysCtlSRAMSizeGet_IgnoreBool;
  uint32_t SysCtlSRAMSizeGet_FinalReturn;
  char SysCtlSRAMSizeGet_CallbackBool;
  CMOCK_SysCtlSRAMSizeGet_CALLBACK SysCtlSRAMSizeGet_CallbackFunctionPointer;
  int SysCtlSRAMSizeGet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlSRAMSizeGet_CallInstance;
  char SysCtlFlashSizeGet_IgnoreBool;
  uint32_t SysCtlFlashSizeGet_FinalReturn;
  char SysCtlFlashSizeGet_CallbackBool;
  CMOCK_SysCtlFlashSizeGet_CALLBACK SysCtlFlashSizeGet_CallbackFunctionPointer;
  int SysCtlFlashSizeGet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlFlashSizeGet_CallInstance;
  char SysCtlFlashSectorSizeGet_IgnoreBool;
  uint32_t SysCtlFlashSectorSizeGet_FinalReturn;
  char SysCtlFlashSectorSizeGet_CallbackBool;
  CMOCK_SysCtlFlashSectorSizeGet_CALLBACK SysCtlFlashSectorSizeGet_CallbackFunctionPointer;
  int SysCtlFlashSectorSizeGet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlFlashSectorSizeGet_CallInstance;
  char SysCtlPeripheralPresent_IgnoreBool;
  bool SysCtlPeripheralPresent_FinalReturn;
  char SysCtlPeripheralPresent_CallbackBool;
  CMOCK_SysCtlPeripheralPresent_CALLBACK SysCtlPeripheralPresent_CallbackFunctionPointer;
  int SysCtlPeripheralPresent_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPeripheralPresent_CallInstance;
  char SysCtlPeripheralReady_IgnoreBool;
  bool SysCtlPeripheralReady_FinalReturn;
  char SysCtlPeripheralReady_CallbackBool;
  CMOCK_SysCtlPeripheralReady_CALLBACK SysCtlPeripheralReady_CallbackFunctionPointer;
  int SysCtlPeripheralReady_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPeripheralReady_CallInstance;
  char SysCtlPeripheralPowerOn_IgnoreBool;
  char SysCtlPeripheralPowerOn_CallbackBool;
  CMOCK_SysCtlPeripheralPowerOn_CALLBACK SysCtlPeripheralPowerOn_CallbackFunctionPointer;
  int SysCtlPeripheralPowerOn_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPeripheralPowerOn_CallInstance;
  char SysCtlPeripheralPowerOff_IgnoreBool;
  char SysCtlPeripheralPowerOff_CallbackBool;
  CMOCK_SysCtlPeripheralPowerOff_CALLBACK SysCtlPeripheralPowerOff_CallbackFunctionPointer;
  int SysCtlPeripheralPowerOff_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPeripheralPowerOff_CallInstance;
  char SysCtlPeripheralReset_IgnoreBool;
  char SysCtlPeripheralReset_CallbackBool;
  CMOCK_SysCtlPeripheralReset_CALLBACK SysCtlPeripheralReset_CallbackFunctionPointer;
  int SysCtlPeripheralReset_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPeripheralReset_CallInstance;
  char SysCtlPeripheralEnable_IgnoreBool;
  char SysCtlPeripheralEnable_CallbackBool;
  CMOCK_SysCtlPeripheralEnable_CALLBACK SysCtlPeripheralEnable_CallbackFunctionPointer;
  int SysCtlPeripheralEnable_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPeripheralEnable_CallInstance;
  char SysCtlPeripheralDisable_IgnoreBool;
  char SysCtlPeripheralDisable_CallbackBool;
  CMOCK_SysCtlPeripheralDisable_CALLBACK SysCtlPeripheralDisable_CallbackFunctionPointer;
  int SysCtlPeripheralDisable_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPeripheralDisable_CallInstance;
  char SysCtlPeripheralSleepEnable_IgnoreBool;
  char SysCtlPeripheralSleepEnable_CallbackBool;
  CMOCK_SysCtlPeripheralSleepEnable_CALLBACK SysCtlPeripheralSleepEnable_CallbackFunctionPointer;
  int SysCtlPeripheralSleepEnable_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPeripheralSleepEnable_CallInstance;
  char SysCtlPeripheralSleepDisable_IgnoreBool;
  char SysCtlPeripheralSleepDisable_CallbackBool;
  CMOCK_SysCtlPeripheralSleepDisable_CALLBACK SysCtlPeripheralSleepDisable_CallbackFunctionPointer;
  int SysCtlPeripheralSleepDisable_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPeripheralSleepDisable_CallInstance;
  char SysCtlPeripheralDeepSleepEnable_IgnoreBool;
  char SysCtlPeripheralDeepSleepEnable_CallbackBool;
  CMOCK_SysCtlPeripheralDeepSleepEnable_CALLBACK SysCtlPeripheralDeepSleepEnable_CallbackFunctionPointer;
  int SysCtlPeripheralDeepSleepEnable_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPeripheralDeepSleepEnable_CallInstance;
  char SysCtlPeripheralDeepSleepDisable_IgnoreBool;
  char SysCtlPeripheralDeepSleepDisable_CallbackBool;
  CMOCK_SysCtlPeripheralDeepSleepDisable_CALLBACK SysCtlPeripheralDeepSleepDisable_CallbackFunctionPointer;
  int SysCtlPeripheralDeepSleepDisable_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPeripheralDeepSleepDisable_CallInstance;
  char SysCtlPeripheralClockGating_IgnoreBool;
  char SysCtlPeripheralClockGating_CallbackBool;
  CMOCK_SysCtlPeripheralClockGating_CALLBACK SysCtlPeripheralClockGating_CallbackFunctionPointer;
  int SysCtlPeripheralClockGating_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPeripheralClockGating_CallInstance;
  char SysCtlIntRegister_IgnoreBool;
  char SysCtlIntRegister_CallbackBool;
  CMOCK_SysCtlIntRegister_CALLBACK SysCtlIntRegister_CallbackFunctionPointer;
  int SysCtlIntRegister_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlIntRegister_CallInstance;
  char SysCtlIntUnregister_IgnoreBool;
  char SysCtlIntUnregister_CallbackBool;
  CMOCK_SysCtlIntUnregister_CALLBACK SysCtlIntUnregister_CallbackFunctionPointer;
  int SysCtlIntUnregister_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlIntUnregister_CallInstance;
  char SysCtlIntEnable_IgnoreBool;
  char SysCtlIntEnable_CallbackBool;
  CMOCK_SysCtlIntEnable_CALLBACK SysCtlIntEnable_CallbackFunctionPointer;
  int SysCtlIntEnable_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlIntEnable_CallInstance;
  char SysCtlIntDisable_IgnoreBool;
  char SysCtlIntDisable_CallbackBool;
  CMOCK_SysCtlIntDisable_CALLBACK SysCtlIntDisable_CallbackFunctionPointer;
  int SysCtlIntDisable_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlIntDisable_CallInstance;
  char SysCtlIntClear_IgnoreBool;
  char SysCtlIntClear_CallbackBool;
  CMOCK_SysCtlIntClear_CALLBACK SysCtlIntClear_CallbackFunctionPointer;
  int SysCtlIntClear_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlIntClear_CallInstance;
  char SysCtlIntStatus_IgnoreBool;
  uint32_t SysCtlIntStatus_FinalReturn;
  char SysCtlIntStatus_CallbackBool;
  CMOCK_SysCtlIntStatus_CALLBACK SysCtlIntStatus_CallbackFunctionPointer;
  int SysCtlIntStatus_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlIntStatus_CallInstance;
  char SysCtlLDOSleepSet_IgnoreBool;
  char SysCtlLDOSleepSet_CallbackBool;
  CMOCK_SysCtlLDOSleepSet_CALLBACK SysCtlLDOSleepSet_CallbackFunctionPointer;
  int SysCtlLDOSleepSet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlLDOSleepSet_CallInstance;
  char SysCtlLDOSleepGet_IgnoreBool;
  uint32_t SysCtlLDOSleepGet_FinalReturn;
  char SysCtlLDOSleepGet_CallbackBool;
  CMOCK_SysCtlLDOSleepGet_CALLBACK SysCtlLDOSleepGet_CallbackFunctionPointer;
  int SysCtlLDOSleepGet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlLDOSleepGet_CallInstance;
  char SysCtlLDODeepSleepSet_IgnoreBool;
  char SysCtlLDODeepSleepSet_CallbackBool;
  CMOCK_SysCtlLDODeepSleepSet_CALLBACK SysCtlLDODeepSleepSet_CallbackFunctionPointer;
  int SysCtlLDODeepSleepSet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlLDODeepSleepSet_CallInstance;
  char SysCtlLDODeepSleepGet_IgnoreBool;
  uint32_t SysCtlLDODeepSleepGet_FinalReturn;
  char SysCtlLDODeepSleepGet_CallbackBool;
  CMOCK_SysCtlLDODeepSleepGet_CALLBACK SysCtlLDODeepSleepGet_CallbackFunctionPointer;
  int SysCtlLDODeepSleepGet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlLDODeepSleepGet_CallInstance;
  char SysCtlSleepPowerSet_IgnoreBool;
  char SysCtlSleepPowerSet_CallbackBool;
  CMOCK_SysCtlSleepPowerSet_CALLBACK SysCtlSleepPowerSet_CallbackFunctionPointer;
  int SysCtlSleepPowerSet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlSleepPowerSet_CallInstance;
  char SysCtlDeepSleepPowerSet_IgnoreBool;
  char SysCtlDeepSleepPowerSet_CallbackBool;
  CMOCK_SysCtlDeepSleepPowerSet_CALLBACK SysCtlDeepSleepPowerSet_CallbackFunctionPointer;
  int SysCtlDeepSleepPowerSet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlDeepSleepPowerSet_CallInstance;
  char SysCtlReset_IgnoreBool;
  char SysCtlReset_CallbackBool;
  CMOCK_SysCtlReset_CALLBACK SysCtlReset_CallbackFunctionPointer;
  int SysCtlReset_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlReset_CallInstance;
  char SysCtlSleep_IgnoreBool;
  char SysCtlSleep_CallbackBool;
  CMOCK_SysCtlSleep_CALLBACK SysCtlSleep_CallbackFunctionPointer;
  int SysCtlSleep_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlSleep_CallInstance;
  char SysCtlDeepSleep_IgnoreBool;
  char SysCtlDeepSleep_CallbackBool;
  CMOCK_SysCtlDeepSleep_CALLBACK SysCtlDeepSleep_CallbackFunctionPointer;
  int SysCtlDeepSleep_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlDeepSleep_CallInstance;
  char SysCtlResetCauseGet_IgnoreBool;
  uint32_t SysCtlResetCauseGet_FinalReturn;
  char SysCtlResetCauseGet_CallbackBool;
  CMOCK_SysCtlResetCauseGet_CALLBACK SysCtlResetCauseGet_CallbackFunctionPointer;
  int SysCtlResetCauseGet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlResetCauseGet_CallInstance;
  char SysCtlResetCauseClear_IgnoreBool;
  char SysCtlResetCauseClear_CallbackBool;
  CMOCK_SysCtlResetCauseClear_CALLBACK SysCtlResetCauseClear_CallbackFunctionPointer;
  int SysCtlResetCauseClear_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlResetCauseClear_CallInstance;
  char SysCtlBrownOutConfigSet_IgnoreBool;
  char SysCtlBrownOutConfigSet_CallbackBool;
  CMOCK_SysCtlBrownOutConfigSet_CALLBACK SysCtlBrownOutConfigSet_CallbackFunctionPointer;
  int SysCtlBrownOutConfigSet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlBrownOutConfigSet_CallInstance;
  char SysCtlDelay_IgnoreBool;
  char SysCtlDelay_CallbackBool;
  CMOCK_SysCtlDelay_CALLBACK SysCtlDelay_CallbackFunctionPointer;
  int SysCtlDelay_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlDelay_CallInstance;
  char SysCtlMOSCConfigSet_IgnoreBool;
  char SysCtlMOSCConfigSet_CallbackBool;
  CMOCK_SysCtlMOSCConfigSet_CALLBACK SysCtlMOSCConfigSet_CallbackFunctionPointer;
  int SysCtlMOSCConfigSet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlMOSCConfigSet_CallInstance;
  char SysCtlPIOSCCalibrate_IgnoreBool;
  uint32_t SysCtlPIOSCCalibrate_FinalReturn;
  char SysCtlPIOSCCalibrate_CallbackBool;
  CMOCK_SysCtlPIOSCCalibrate_CALLBACK SysCtlPIOSCCalibrate_CallbackFunctionPointer;
  int SysCtlPIOSCCalibrate_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPIOSCCalibrate_CallInstance;
  char SysCtlClockSet_IgnoreBool;
  char SysCtlClockSet_CallbackBool;
  CMOCK_SysCtlClockSet_CALLBACK SysCtlClockSet_CallbackFunctionPointer;
  int SysCtlClockSet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlClockSet_CallInstance;
  char SysCtlClockGet_IgnoreBool;
  uint32_t SysCtlClockGet_FinalReturn;
  char SysCtlClockGet_CallbackBool;
  CMOCK_SysCtlClockGet_CALLBACK SysCtlClockGet_CallbackFunctionPointer;
  int SysCtlClockGet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlClockGet_CallInstance;
  char SysCtlDeepSleepClockSet_IgnoreBool;
  char SysCtlDeepSleepClockSet_CallbackBool;
  CMOCK_SysCtlDeepSleepClockSet_CALLBACK SysCtlDeepSleepClockSet_CallbackFunctionPointer;
  int SysCtlDeepSleepClockSet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlDeepSleepClockSet_CallInstance;
  char SysCtlDeepSleepClockConfigSet_IgnoreBool;
  char SysCtlDeepSleepClockConfigSet_CallbackBool;
  CMOCK_SysCtlDeepSleepClockConfigSet_CALLBACK SysCtlDeepSleepClockConfigSet_CallbackFunctionPointer;
  int SysCtlDeepSleepClockConfigSet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlDeepSleepClockConfigSet_CallInstance;
  char SysCtlPWMClockSet_IgnoreBool;
  char SysCtlPWMClockSet_CallbackBool;
  CMOCK_SysCtlPWMClockSet_CALLBACK SysCtlPWMClockSet_CallbackFunctionPointer;
  int SysCtlPWMClockSet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPWMClockSet_CallInstance;
  char SysCtlPWMClockGet_IgnoreBool;
  uint32_t SysCtlPWMClockGet_FinalReturn;
  char SysCtlPWMClockGet_CallbackBool;
  CMOCK_SysCtlPWMClockGet_CALLBACK SysCtlPWMClockGet_CallbackFunctionPointer;
  int SysCtlPWMClockGet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPWMClockGet_CallInstance;
  char SysCtlIOSCVerificationSet_IgnoreBool;
  char SysCtlIOSCVerificationSet_CallbackBool;
  CMOCK_SysCtlIOSCVerificationSet_CALLBACK SysCtlIOSCVerificationSet_CallbackFunctionPointer;
  int SysCtlIOSCVerificationSet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlIOSCVerificationSet_CallInstance;
  char SysCtlMOSCVerificationSet_IgnoreBool;
  char SysCtlMOSCVerificationSet_CallbackBool;
  CMOCK_SysCtlMOSCVerificationSet_CALLBACK SysCtlMOSCVerificationSet_CallbackFunctionPointer;
  int SysCtlMOSCVerificationSet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlMOSCVerificationSet_CallInstance;
  char SysCtlPLLVerificationSet_IgnoreBool;
  char SysCtlPLLVerificationSet_CallbackBool;
  CMOCK_SysCtlPLLVerificationSet_CALLBACK SysCtlPLLVerificationSet_CallbackFunctionPointer;
  int SysCtlPLLVerificationSet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlPLLVerificationSet_CallInstance;
  char SysCtlClkVerificationClear_IgnoreBool;
  char SysCtlClkVerificationClear_CallbackBool;
  CMOCK_SysCtlClkVerificationClear_CALLBACK SysCtlClkVerificationClear_CallbackFunctionPointer;
  int SysCtlClkVerificationClear_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlClkVerificationClear_CallInstance;
  char SysCtlGPIOAHBEnable_IgnoreBool;
  char SysCtlGPIOAHBEnable_CallbackBool;
  CMOCK_SysCtlGPIOAHBEnable_CALLBACK SysCtlGPIOAHBEnable_CallbackFunctionPointer;
  int SysCtlGPIOAHBEnable_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlGPIOAHBEnable_CallInstance;
  char SysCtlGPIOAHBDisable_IgnoreBool;
  char SysCtlGPIOAHBDisable_CallbackBool;
  CMOCK_SysCtlGPIOAHBDisable_CALLBACK SysCtlGPIOAHBDisable_CallbackFunctionPointer;
  int SysCtlGPIOAHBDisable_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlGPIOAHBDisable_CallInstance;
  char SysCtlUSBPLLEnable_IgnoreBool;
  char SysCtlUSBPLLEnable_CallbackBool;
  CMOCK_SysCtlUSBPLLEnable_CALLBACK SysCtlUSBPLLEnable_CallbackFunctionPointer;
  int SysCtlUSBPLLEnable_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlUSBPLLEnable_CallInstance;
  char SysCtlUSBPLLDisable_IgnoreBool;
  char SysCtlUSBPLLDisable_CallbackBool;
  CMOCK_SysCtlUSBPLLDisable_CALLBACK SysCtlUSBPLLDisable_CallbackFunctionPointer;
  int SysCtlUSBPLLDisable_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlUSBPLLDisable_CallInstance;
  char SysCtlClockFreqSet_IgnoreBool;
  uint32_t SysCtlClockFreqSet_FinalReturn;
  char SysCtlClockFreqSet_CallbackBool;
  CMOCK_SysCtlClockFreqSet_CALLBACK SysCtlClockFreqSet_CallbackFunctionPointer;
  int SysCtlClockFreqSet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlClockFreqSet_CallInstance;
  char SysCtlResetBehaviorSet_IgnoreBool;
  char SysCtlResetBehaviorSet_CallbackBool;
  CMOCK_SysCtlResetBehaviorSet_CALLBACK SysCtlResetBehaviorSet_CallbackFunctionPointer;
  int SysCtlResetBehaviorSet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlResetBehaviorSet_CallInstance;
  char SysCtlResetBehaviorGet_IgnoreBool;
  uint32_t SysCtlResetBehaviorGet_FinalReturn;
  char SysCtlResetBehaviorGet_CallbackBool;
  CMOCK_SysCtlResetBehaviorGet_CALLBACK SysCtlResetBehaviorGet_CallbackFunctionPointer;
  int SysCtlResetBehaviorGet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlResetBehaviorGet_CallInstance;
  char SysCtlClockOutConfig_IgnoreBool;
  char SysCtlClockOutConfig_CallbackBool;
  CMOCK_SysCtlClockOutConfig_CALLBACK SysCtlClockOutConfig_CallbackFunctionPointer;
  int SysCtlClockOutConfig_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlClockOutConfig_CallInstance;
  char SysCtlAltClkConfig_IgnoreBool;
  char SysCtlAltClkConfig_CallbackBool;
  CMOCK_SysCtlAltClkConfig_CALLBACK SysCtlAltClkConfig_CallbackFunctionPointer;
  int SysCtlAltClkConfig_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlAltClkConfig_CallInstance;
  char SysCtlNMIStatus_IgnoreBool;
  uint32_t SysCtlNMIStatus_FinalReturn;
  char SysCtlNMIStatus_CallbackBool;
  CMOCK_SysCtlNMIStatus_CALLBACK SysCtlNMIStatus_CallbackFunctionPointer;
  int SysCtlNMIStatus_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlNMIStatus_CallInstance;
  char SysCtlNMIClear_IgnoreBool;
  char SysCtlNMIClear_CallbackBool;
  CMOCK_SysCtlNMIClear_CALLBACK SysCtlNMIClear_CallbackFunctionPointer;
  int SysCtlNMIClear_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlNMIClear_CallInstance;
  char SysCtlVoltageEventConfig_IgnoreBool;
  char SysCtlVoltageEventConfig_CallbackBool;
  CMOCK_SysCtlVoltageEventConfig_CALLBACK SysCtlVoltageEventConfig_CallbackFunctionPointer;
  int SysCtlVoltageEventConfig_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlVoltageEventConfig_CallInstance;
  char SysCtlVoltageEventStatus_IgnoreBool;
  uint32_t SysCtlVoltageEventStatus_FinalReturn;
  char SysCtlVoltageEventStatus_CallbackBool;
  CMOCK_SysCtlVoltageEventStatus_CALLBACK SysCtlVoltageEventStatus_CallbackFunctionPointer;
  int SysCtlVoltageEventStatus_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlVoltageEventStatus_CallInstance;
  char SysCtlVoltageEventClear_IgnoreBool;
  char SysCtlVoltageEventClear_CallbackBool;
  CMOCK_SysCtlVoltageEventClear_CALLBACK SysCtlVoltageEventClear_CallbackFunctionPointer;
  int SysCtlVoltageEventClear_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlVoltageEventClear_CallInstance;
  char SysCtlVCOGet_IgnoreBool;
  bool SysCtlVCOGet_FinalReturn;
  char SysCtlVCOGet_CallbackBool;
  CMOCK_SysCtlVCOGet_CALLBACK SysCtlVCOGet_CallbackFunctionPointer;
  int SysCtlVCOGet_CallbackCalls;
  CMOCK_MEM_INDEX_TYPE SysCtlVCOGet_CallInstance;
} Mock;

extern jmp_buf AbortFrame;
extern int GlobalExpectCount;
extern int GlobalVerifyOrder;

void mock_sysctl_Verify(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_MEM_INDEX_TYPE call_instance;
  call_instance = Mock.SysCtlSRAMSizeGet_CallInstance;
  if (Mock.SysCtlSRAMSizeGet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlSRAMSizeGet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlSRAMSizeGet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlFlashSizeGet_CallInstance;
  if (Mock.SysCtlFlashSizeGet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlFlashSizeGet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlFlashSizeGet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlFlashSectorSizeGet_CallInstance;
  if (Mock.SysCtlFlashSectorSizeGet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlFlashSectorSizeGet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlFlashSectorSizeGet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPeripheralPresent_CallInstance;
  if (Mock.SysCtlPeripheralPresent_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPeripheralPresent);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPeripheralPresent_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPeripheralReady_CallInstance;
  if (Mock.SysCtlPeripheralReady_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPeripheralReady);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPeripheralReady_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPeripheralPowerOn_CallInstance;
  if (Mock.SysCtlPeripheralPowerOn_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPeripheralPowerOn);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPeripheralPowerOn_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPeripheralPowerOff_CallInstance;
  if (Mock.SysCtlPeripheralPowerOff_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPeripheralPowerOff);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPeripheralPowerOff_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPeripheralReset_CallInstance;
  if (Mock.SysCtlPeripheralReset_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPeripheralReset);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPeripheralReset_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPeripheralEnable_CallInstance;
  if (Mock.SysCtlPeripheralEnable_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPeripheralEnable);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPeripheralEnable_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPeripheralDisable_CallInstance;
  if (Mock.SysCtlPeripheralDisable_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPeripheralDisable);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPeripheralDisable_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPeripheralSleepEnable_CallInstance;
  if (Mock.SysCtlPeripheralSleepEnable_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPeripheralSleepEnable);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPeripheralSleepEnable_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPeripheralSleepDisable_CallInstance;
  if (Mock.SysCtlPeripheralSleepDisable_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPeripheralSleepDisable);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPeripheralSleepDisable_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPeripheralDeepSleepEnable_CallInstance;
  if (Mock.SysCtlPeripheralDeepSleepEnable_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPeripheralDeepSleepEnable);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPeripheralDeepSleepEnable_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPeripheralDeepSleepDisable_CallInstance;
  if (Mock.SysCtlPeripheralDeepSleepDisable_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPeripheralDeepSleepDisable);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPeripheralDeepSleepDisable_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPeripheralClockGating_CallInstance;
  if (Mock.SysCtlPeripheralClockGating_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPeripheralClockGating);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPeripheralClockGating_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlIntRegister_CallInstance;
  if (Mock.SysCtlIntRegister_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlIntRegister);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlIntRegister_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlIntUnregister_CallInstance;
  if (Mock.SysCtlIntUnregister_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlIntUnregister);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlIntUnregister_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlIntEnable_CallInstance;
  if (Mock.SysCtlIntEnable_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlIntEnable);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlIntEnable_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlIntDisable_CallInstance;
  if (Mock.SysCtlIntDisable_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlIntDisable);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlIntDisable_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlIntClear_CallInstance;
  if (Mock.SysCtlIntClear_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlIntClear);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlIntClear_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlIntStatus_CallInstance;
  if (Mock.SysCtlIntStatus_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlIntStatus);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlIntStatus_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlLDOSleepSet_CallInstance;
  if (Mock.SysCtlLDOSleepSet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlLDOSleepSet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlLDOSleepSet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlLDOSleepGet_CallInstance;
  if (Mock.SysCtlLDOSleepGet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlLDOSleepGet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlLDOSleepGet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlLDODeepSleepSet_CallInstance;
  if (Mock.SysCtlLDODeepSleepSet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlLDODeepSleepSet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlLDODeepSleepSet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlLDODeepSleepGet_CallInstance;
  if (Mock.SysCtlLDODeepSleepGet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlLDODeepSleepGet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlLDODeepSleepGet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlSleepPowerSet_CallInstance;
  if (Mock.SysCtlSleepPowerSet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlSleepPowerSet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlSleepPowerSet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlDeepSleepPowerSet_CallInstance;
  if (Mock.SysCtlDeepSleepPowerSet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlDeepSleepPowerSet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlDeepSleepPowerSet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlReset_CallInstance;
  if (Mock.SysCtlReset_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlReset);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlReset_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlSleep_CallInstance;
  if (Mock.SysCtlSleep_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlSleep);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlSleep_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlDeepSleep_CallInstance;
  if (Mock.SysCtlDeepSleep_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlDeepSleep);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlDeepSleep_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlResetCauseGet_CallInstance;
  if (Mock.SysCtlResetCauseGet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlResetCauseGet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlResetCauseGet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlResetCauseClear_CallInstance;
  if (Mock.SysCtlResetCauseClear_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlResetCauseClear);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlResetCauseClear_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlBrownOutConfigSet_CallInstance;
  if (Mock.SysCtlBrownOutConfigSet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlBrownOutConfigSet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlBrownOutConfigSet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlDelay_CallInstance;
  if (Mock.SysCtlDelay_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlDelay);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlDelay_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlMOSCConfigSet_CallInstance;
  if (Mock.SysCtlMOSCConfigSet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlMOSCConfigSet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlMOSCConfigSet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPIOSCCalibrate_CallInstance;
  if (Mock.SysCtlPIOSCCalibrate_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPIOSCCalibrate);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPIOSCCalibrate_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlClockSet_CallInstance;
  if (Mock.SysCtlClockSet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlClockSet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlClockSet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlClockGet_CallInstance;
  if (Mock.SysCtlClockGet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlClockGet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlClockGet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlDeepSleepClockSet_CallInstance;
  if (Mock.SysCtlDeepSleepClockSet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlDeepSleepClockSet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlDeepSleepClockSet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlDeepSleepClockConfigSet_CallInstance;
  if (Mock.SysCtlDeepSleepClockConfigSet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlDeepSleepClockConfigSet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlDeepSleepClockConfigSet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPWMClockSet_CallInstance;
  if (Mock.SysCtlPWMClockSet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPWMClockSet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPWMClockSet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPWMClockGet_CallInstance;
  if (Mock.SysCtlPWMClockGet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPWMClockGet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPWMClockGet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlIOSCVerificationSet_CallInstance;
  if (Mock.SysCtlIOSCVerificationSet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlIOSCVerificationSet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlIOSCVerificationSet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlMOSCVerificationSet_CallInstance;
  if (Mock.SysCtlMOSCVerificationSet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlMOSCVerificationSet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlMOSCVerificationSet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlPLLVerificationSet_CallInstance;
  if (Mock.SysCtlPLLVerificationSet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlPLLVerificationSet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlPLLVerificationSet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlClkVerificationClear_CallInstance;
  if (Mock.SysCtlClkVerificationClear_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlClkVerificationClear);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlClkVerificationClear_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlGPIOAHBEnable_CallInstance;
  if (Mock.SysCtlGPIOAHBEnable_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlGPIOAHBEnable);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlGPIOAHBEnable_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlGPIOAHBDisable_CallInstance;
  if (Mock.SysCtlGPIOAHBDisable_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlGPIOAHBDisable);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlGPIOAHBDisable_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlUSBPLLEnable_CallInstance;
  if (Mock.SysCtlUSBPLLEnable_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlUSBPLLEnable);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlUSBPLLEnable_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlUSBPLLDisable_CallInstance;
  if (Mock.SysCtlUSBPLLDisable_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlUSBPLLDisable);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlUSBPLLDisable_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlClockFreqSet_CallInstance;
  if (Mock.SysCtlClockFreqSet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlClockFreqSet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlClockFreqSet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlResetBehaviorSet_CallInstance;
  if (Mock.SysCtlResetBehaviorSet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlResetBehaviorSet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlResetBehaviorSet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlResetBehaviorGet_CallInstance;
  if (Mock.SysCtlResetBehaviorGet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlResetBehaviorGet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlResetBehaviorGet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlClockOutConfig_CallInstance;
  if (Mock.SysCtlClockOutConfig_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlClockOutConfig);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlClockOutConfig_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlAltClkConfig_CallInstance;
  if (Mock.SysCtlAltClkConfig_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlAltClkConfig);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlAltClkConfig_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlNMIStatus_CallInstance;
  if (Mock.SysCtlNMIStatus_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlNMIStatus);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlNMIStatus_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlNMIClear_CallInstance;
  if (Mock.SysCtlNMIClear_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlNMIClear);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlNMIClear_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlVoltageEventConfig_CallInstance;
  if (Mock.SysCtlVoltageEventConfig_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlVoltageEventConfig);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlVoltageEventConfig_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlVoltageEventStatus_CallInstance;
  if (Mock.SysCtlVoltageEventStatus_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlVoltageEventStatus);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlVoltageEventStatus_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlVoltageEventClear_CallInstance;
  if (Mock.SysCtlVoltageEventClear_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlVoltageEventClear);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlVoltageEventClear_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
  call_instance = Mock.SysCtlVCOGet_CallInstance;
  if (Mock.SysCtlVCOGet_IgnoreBool)
    call_instance = CMOCK_GUTS_NONE;
  if (CMOCK_GUTS_NONE != call_instance)
  {
    UNITY_SET_DETAIL(CMockString_SysCtlVCOGet);
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLess);
  }
  if (Mock.SysCtlVCOGet_CallbackFunctionPointer != NULL)
  {
    call_instance = CMOCK_GUTS_NONE;
    (void)call_instance;
  }
}

void mock_sysctl_Init(void)
{
  mock_sysctl_Destroy();
}

void mock_sysctl_Destroy(void)
{
  CMock_Guts_MemFreeAll();
  memset(&Mock, 0, sizeof(Mock));
  GlobalExpectCount = 0;
  GlobalVerifyOrder = 0;
}

uint32_t SysCtlSRAMSizeGet(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlSRAMSizeGet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlSRAMSizeGet);
  cmock_call_instance = (CMOCK_SysCtlSRAMSizeGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlSRAMSizeGet_CallInstance);
  Mock.SysCtlSRAMSizeGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlSRAMSizeGet_CallInstance);
  if (Mock.SysCtlSRAMSizeGet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlSRAMSizeGet_FinalReturn;
    Mock.SysCtlSRAMSizeGet_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlSRAMSizeGet_CallbackBool &&
      Mock.SysCtlSRAMSizeGet_CallbackFunctionPointer != NULL)
  {
    uint32_t cmock_cb_ret = Mock.SysCtlSRAMSizeGet_CallbackFunctionPointer(Mock.SysCtlSRAMSizeGet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlSRAMSizeGet_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlSRAMSizeGet_CallbackFunctionPointer(Mock.SysCtlSRAMSizeGet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void SysCtlSRAMSizeGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlSRAMSizeGet_CALL_INSTANCE));
  CMOCK_SysCtlSRAMSizeGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlSRAMSizeGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlSRAMSizeGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlSRAMSizeGet_CallInstance, cmock_guts_index);
  Mock.SysCtlSRAMSizeGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlSRAMSizeGet_IgnoreBool = (char)1;
}

void SysCtlSRAMSizeGet_CMockStopIgnore(void)
{
  if(Mock.SysCtlSRAMSizeGet_IgnoreBool)
    Mock.SysCtlSRAMSizeGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlSRAMSizeGet_CallInstance);
  Mock.SysCtlSRAMSizeGet_IgnoreBool = (char)0;
}

void SysCtlSRAMSizeGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlSRAMSizeGet_CALL_INSTANCE));
  CMOCK_SysCtlSRAMSizeGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlSRAMSizeGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlSRAMSizeGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlSRAMSizeGet_CallInstance, cmock_guts_index);
  Mock.SysCtlSRAMSizeGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlSRAMSizeGet_AddCallback(CMOCK_SysCtlSRAMSizeGet_CALLBACK Callback)
{
  Mock.SysCtlSRAMSizeGet_IgnoreBool = (char)0;
  Mock.SysCtlSRAMSizeGet_CallbackBool = (char)1;
  Mock.SysCtlSRAMSizeGet_CallbackFunctionPointer = Callback;
}

void SysCtlSRAMSizeGet_Stub(CMOCK_SysCtlSRAMSizeGet_CALLBACK Callback)
{
  Mock.SysCtlSRAMSizeGet_IgnoreBool = (char)0;
  Mock.SysCtlSRAMSizeGet_CallbackBool = (char)0;
  Mock.SysCtlSRAMSizeGet_CallbackFunctionPointer = Callback;
}

uint32_t SysCtlFlashSizeGet(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlFlashSizeGet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlFlashSizeGet);
  cmock_call_instance = (CMOCK_SysCtlFlashSizeGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlFlashSizeGet_CallInstance);
  Mock.SysCtlFlashSizeGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlFlashSizeGet_CallInstance);
  if (Mock.SysCtlFlashSizeGet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlFlashSizeGet_FinalReturn;
    Mock.SysCtlFlashSizeGet_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlFlashSizeGet_CallbackBool &&
      Mock.SysCtlFlashSizeGet_CallbackFunctionPointer != NULL)
  {
    uint32_t cmock_cb_ret = Mock.SysCtlFlashSizeGet_CallbackFunctionPointer(Mock.SysCtlFlashSizeGet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlFlashSizeGet_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlFlashSizeGet_CallbackFunctionPointer(Mock.SysCtlFlashSizeGet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void SysCtlFlashSizeGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlFlashSizeGet_CALL_INSTANCE));
  CMOCK_SysCtlFlashSizeGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlFlashSizeGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlFlashSizeGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlFlashSizeGet_CallInstance, cmock_guts_index);
  Mock.SysCtlFlashSizeGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlFlashSizeGet_IgnoreBool = (char)1;
}

void SysCtlFlashSizeGet_CMockStopIgnore(void)
{
  if(Mock.SysCtlFlashSizeGet_IgnoreBool)
    Mock.SysCtlFlashSizeGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlFlashSizeGet_CallInstance);
  Mock.SysCtlFlashSizeGet_IgnoreBool = (char)0;
}

void SysCtlFlashSizeGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlFlashSizeGet_CALL_INSTANCE));
  CMOCK_SysCtlFlashSizeGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlFlashSizeGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlFlashSizeGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlFlashSizeGet_CallInstance, cmock_guts_index);
  Mock.SysCtlFlashSizeGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlFlashSizeGet_AddCallback(CMOCK_SysCtlFlashSizeGet_CALLBACK Callback)
{
  Mock.SysCtlFlashSizeGet_IgnoreBool = (char)0;
  Mock.SysCtlFlashSizeGet_CallbackBool = (char)1;
  Mock.SysCtlFlashSizeGet_CallbackFunctionPointer = Callback;
}

void SysCtlFlashSizeGet_Stub(CMOCK_SysCtlFlashSizeGet_CALLBACK Callback)
{
  Mock.SysCtlFlashSizeGet_IgnoreBool = (char)0;
  Mock.SysCtlFlashSizeGet_CallbackBool = (char)0;
  Mock.SysCtlFlashSizeGet_CallbackFunctionPointer = Callback;
}

uint32_t SysCtlFlashSectorSizeGet(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlFlashSectorSizeGet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlFlashSectorSizeGet);
  cmock_call_instance = (CMOCK_SysCtlFlashSectorSizeGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlFlashSectorSizeGet_CallInstance);
  Mock.SysCtlFlashSectorSizeGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlFlashSectorSizeGet_CallInstance);
  if (Mock.SysCtlFlashSectorSizeGet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlFlashSectorSizeGet_FinalReturn;
    Mock.SysCtlFlashSectorSizeGet_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlFlashSectorSizeGet_CallbackBool &&
      Mock.SysCtlFlashSectorSizeGet_CallbackFunctionPointer != NULL)
  {
    uint32_t cmock_cb_ret = Mock.SysCtlFlashSectorSizeGet_CallbackFunctionPointer(Mock.SysCtlFlashSectorSizeGet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlFlashSectorSizeGet_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlFlashSectorSizeGet_CallbackFunctionPointer(Mock.SysCtlFlashSectorSizeGet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void SysCtlFlashSectorSizeGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlFlashSectorSizeGet_CALL_INSTANCE));
  CMOCK_SysCtlFlashSectorSizeGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlFlashSectorSizeGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlFlashSectorSizeGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlFlashSectorSizeGet_CallInstance, cmock_guts_index);
  Mock.SysCtlFlashSectorSizeGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlFlashSectorSizeGet_IgnoreBool = (char)1;
}

void SysCtlFlashSectorSizeGet_CMockStopIgnore(void)
{
  if(Mock.SysCtlFlashSectorSizeGet_IgnoreBool)
    Mock.SysCtlFlashSectorSizeGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlFlashSectorSizeGet_CallInstance);
  Mock.SysCtlFlashSectorSizeGet_IgnoreBool = (char)0;
}

void SysCtlFlashSectorSizeGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlFlashSectorSizeGet_CALL_INSTANCE));
  CMOCK_SysCtlFlashSectorSizeGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlFlashSectorSizeGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlFlashSectorSizeGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlFlashSectorSizeGet_CallInstance, cmock_guts_index);
  Mock.SysCtlFlashSectorSizeGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlFlashSectorSizeGet_AddCallback(CMOCK_SysCtlFlashSectorSizeGet_CALLBACK Callback)
{
  Mock.SysCtlFlashSectorSizeGet_IgnoreBool = (char)0;
  Mock.SysCtlFlashSectorSizeGet_CallbackBool = (char)1;
  Mock.SysCtlFlashSectorSizeGet_CallbackFunctionPointer = Callback;
}

void SysCtlFlashSectorSizeGet_Stub(CMOCK_SysCtlFlashSectorSizeGet_CALLBACK Callback)
{
  Mock.SysCtlFlashSectorSizeGet_IgnoreBool = (char)0;
  Mock.SysCtlFlashSectorSizeGet_CallbackBool = (char)0;
  Mock.SysCtlFlashSectorSizeGet_CallbackFunctionPointer = Callback;
}

bool SysCtlPeripheralPresent(uint32_t ui32Peripheral)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPeripheralPresent_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPeripheralPresent);
  cmock_call_instance = (CMOCK_SysCtlPeripheralPresent_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPeripheralPresent_CallInstance);
  Mock.SysCtlPeripheralPresent_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPeripheralPresent_CallInstance);
  if (Mock.SysCtlPeripheralPresent_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlPeripheralPresent_FinalReturn;
    Mock.SysCtlPeripheralPresent_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlPeripheralPresent_CallbackBool &&
      Mock.SysCtlPeripheralPresent_CallbackFunctionPointer != NULL)
  {
    bool cmock_cb_ret = Mock.SysCtlPeripheralPresent_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralPresent_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlPeripheralPresent,CMockString_ui32Peripheral);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Peripheral, ui32Peripheral, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlPeripheralPresent_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlPeripheralPresent_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralPresent_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void CMockExpectParameters_SysCtlPeripheralPresent(CMOCK_SysCtlPeripheralPresent_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral);
void CMockExpectParameters_SysCtlPeripheralPresent(CMOCK_SysCtlPeripheralPresent_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral)
{
  cmock_call_instance->Expected_ui32Peripheral = ui32Peripheral;
}

void SysCtlPeripheralPresent_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPeripheralPresent_CALL_INSTANCE));
  CMOCK_SysCtlPeripheralPresent_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPeripheralPresent_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPeripheralPresent_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPeripheralPresent_CallInstance, cmock_guts_index);
  Mock.SysCtlPeripheralPresent_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlPeripheralPresent_IgnoreBool = (char)1;
}

void SysCtlPeripheralPresent_CMockStopIgnore(void)
{
  if(Mock.SysCtlPeripheralPresent_IgnoreBool)
    Mock.SysCtlPeripheralPresent_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPeripheralPresent_CallInstance);
  Mock.SysCtlPeripheralPresent_IgnoreBool = (char)0;
}

void SysCtlPeripheralPresent_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ui32Peripheral, bool cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPeripheralPresent_CALL_INSTANCE));
  CMOCK_SysCtlPeripheralPresent_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPeripheralPresent_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPeripheralPresent_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPeripheralPresent_CallInstance, cmock_guts_index);
  Mock.SysCtlPeripheralPresent_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlPeripheralPresent(cmock_call_instance, ui32Peripheral);
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlPeripheralPresent_AddCallback(CMOCK_SysCtlPeripheralPresent_CALLBACK Callback)
{
  Mock.SysCtlPeripheralPresent_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralPresent_CallbackBool = (char)1;
  Mock.SysCtlPeripheralPresent_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralPresent_Stub(CMOCK_SysCtlPeripheralPresent_CALLBACK Callback)
{
  Mock.SysCtlPeripheralPresent_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralPresent_CallbackBool = (char)0;
  Mock.SysCtlPeripheralPresent_CallbackFunctionPointer = Callback;
}

bool SysCtlPeripheralReady(uint32_t ui32Peripheral)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPeripheralReady_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPeripheralReady);
  cmock_call_instance = (CMOCK_SysCtlPeripheralReady_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPeripheralReady_CallInstance);
  Mock.SysCtlPeripheralReady_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPeripheralReady_CallInstance);
  if (Mock.SysCtlPeripheralReady_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlPeripheralReady_FinalReturn;
    Mock.SysCtlPeripheralReady_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlPeripheralReady_CallbackBool &&
      Mock.SysCtlPeripheralReady_CallbackFunctionPointer != NULL)
  {
    bool cmock_cb_ret = Mock.SysCtlPeripheralReady_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralReady_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlPeripheralReady,CMockString_ui32Peripheral);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Peripheral, ui32Peripheral, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlPeripheralReady_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlPeripheralReady_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralReady_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void CMockExpectParameters_SysCtlPeripheralReady(CMOCK_SysCtlPeripheralReady_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral);
void CMockExpectParameters_SysCtlPeripheralReady(CMOCK_SysCtlPeripheralReady_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral)
{
  cmock_call_instance->Expected_ui32Peripheral = ui32Peripheral;
}

void SysCtlPeripheralReady_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPeripheralReady_CALL_INSTANCE));
  CMOCK_SysCtlPeripheralReady_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPeripheralReady_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPeripheralReady_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPeripheralReady_CallInstance, cmock_guts_index);
  Mock.SysCtlPeripheralReady_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlPeripheralReady_IgnoreBool = (char)1;
}

void SysCtlPeripheralReady_CMockStopIgnore(void)
{
  if(Mock.SysCtlPeripheralReady_IgnoreBool)
    Mock.SysCtlPeripheralReady_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPeripheralReady_CallInstance);
  Mock.SysCtlPeripheralReady_IgnoreBool = (char)0;
}

void SysCtlPeripheralReady_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ui32Peripheral, bool cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPeripheralReady_CALL_INSTANCE));
  CMOCK_SysCtlPeripheralReady_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPeripheralReady_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPeripheralReady_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPeripheralReady_CallInstance, cmock_guts_index);
  Mock.SysCtlPeripheralReady_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlPeripheralReady(cmock_call_instance, ui32Peripheral);
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlPeripheralReady_AddCallback(CMOCK_SysCtlPeripheralReady_CALLBACK Callback)
{
  Mock.SysCtlPeripheralReady_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralReady_CallbackBool = (char)1;
  Mock.SysCtlPeripheralReady_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralReady_Stub(CMOCK_SysCtlPeripheralReady_CALLBACK Callback)
{
  Mock.SysCtlPeripheralReady_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralReady_CallbackBool = (char)0;
  Mock.SysCtlPeripheralReady_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralPowerOn(uint32_t ui32Peripheral)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPeripheralPowerOn_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPeripheralPowerOn);
  cmock_call_instance = (CMOCK_SysCtlPeripheralPowerOn_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPeripheralPowerOn_CallInstance);
  Mock.SysCtlPeripheralPowerOn_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPeripheralPowerOn_CallInstance);
  if (Mock.SysCtlPeripheralPowerOn_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlPeripheralPowerOn_CallbackBool &&
      Mock.SysCtlPeripheralPowerOn_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralPowerOn_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralPowerOn_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlPeripheralPowerOn,CMockString_ui32Peripheral);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Peripheral, ui32Peripheral, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlPeripheralPowerOn_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralPowerOn_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralPowerOn_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlPeripheralPowerOn(CMOCK_SysCtlPeripheralPowerOn_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral);
void CMockExpectParameters_SysCtlPeripheralPowerOn(CMOCK_SysCtlPeripheralPowerOn_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral)
{
  cmock_call_instance->Expected_ui32Peripheral = ui32Peripheral;
}

void SysCtlPeripheralPowerOn_CMockIgnore(void)
{
  Mock.SysCtlPeripheralPowerOn_IgnoreBool = (char)1;
}

void SysCtlPeripheralPowerOn_CMockStopIgnore(void)
{
  Mock.SysCtlPeripheralPowerOn_IgnoreBool = (char)0;
}

void SysCtlPeripheralPowerOn_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Peripheral)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPeripheralPowerOn_CALL_INSTANCE));
  CMOCK_SysCtlPeripheralPowerOn_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPeripheralPowerOn_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPeripheralPowerOn_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPeripheralPowerOn_CallInstance, cmock_guts_index);
  Mock.SysCtlPeripheralPowerOn_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlPeripheralPowerOn(cmock_call_instance, ui32Peripheral);
}

void SysCtlPeripheralPowerOn_AddCallback(CMOCK_SysCtlPeripheralPowerOn_CALLBACK Callback)
{
  Mock.SysCtlPeripheralPowerOn_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralPowerOn_CallbackBool = (char)1;
  Mock.SysCtlPeripheralPowerOn_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralPowerOn_Stub(CMOCK_SysCtlPeripheralPowerOn_CALLBACK Callback)
{
  Mock.SysCtlPeripheralPowerOn_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralPowerOn_CallbackBool = (char)0;
  Mock.SysCtlPeripheralPowerOn_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralPowerOff(uint32_t ui32Peripheral)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPeripheralPowerOff_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPeripheralPowerOff);
  cmock_call_instance = (CMOCK_SysCtlPeripheralPowerOff_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPeripheralPowerOff_CallInstance);
  Mock.SysCtlPeripheralPowerOff_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPeripheralPowerOff_CallInstance);
  if (Mock.SysCtlPeripheralPowerOff_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlPeripheralPowerOff_CallbackBool &&
      Mock.SysCtlPeripheralPowerOff_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralPowerOff_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralPowerOff_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlPeripheralPowerOff,CMockString_ui32Peripheral);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Peripheral, ui32Peripheral, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlPeripheralPowerOff_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralPowerOff_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralPowerOff_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlPeripheralPowerOff(CMOCK_SysCtlPeripheralPowerOff_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral);
void CMockExpectParameters_SysCtlPeripheralPowerOff(CMOCK_SysCtlPeripheralPowerOff_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral)
{
  cmock_call_instance->Expected_ui32Peripheral = ui32Peripheral;
}

void SysCtlPeripheralPowerOff_CMockIgnore(void)
{
  Mock.SysCtlPeripheralPowerOff_IgnoreBool = (char)1;
}

void SysCtlPeripheralPowerOff_CMockStopIgnore(void)
{
  Mock.SysCtlPeripheralPowerOff_IgnoreBool = (char)0;
}

void SysCtlPeripheralPowerOff_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Peripheral)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPeripheralPowerOff_CALL_INSTANCE));
  CMOCK_SysCtlPeripheralPowerOff_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPeripheralPowerOff_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPeripheralPowerOff_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPeripheralPowerOff_CallInstance, cmock_guts_index);
  Mock.SysCtlPeripheralPowerOff_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlPeripheralPowerOff(cmock_call_instance, ui32Peripheral);
}

void SysCtlPeripheralPowerOff_AddCallback(CMOCK_SysCtlPeripheralPowerOff_CALLBACK Callback)
{
  Mock.SysCtlPeripheralPowerOff_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralPowerOff_CallbackBool = (char)1;
  Mock.SysCtlPeripheralPowerOff_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralPowerOff_Stub(CMOCK_SysCtlPeripheralPowerOff_CALLBACK Callback)
{
  Mock.SysCtlPeripheralPowerOff_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralPowerOff_CallbackBool = (char)0;
  Mock.SysCtlPeripheralPowerOff_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralReset(uint32_t ui32Peripheral)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPeripheralReset_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPeripheralReset);
  cmock_call_instance = (CMOCK_SysCtlPeripheralReset_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPeripheralReset_CallInstance);
  Mock.SysCtlPeripheralReset_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPeripheralReset_CallInstance);
  if (Mock.SysCtlPeripheralReset_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlPeripheralReset_CallbackBool &&
      Mock.SysCtlPeripheralReset_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralReset_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralReset_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlPeripheralReset,CMockString_ui32Peripheral);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Peripheral, ui32Peripheral, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlPeripheralReset_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralReset_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralReset_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlPeripheralReset(CMOCK_SysCtlPeripheralReset_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral);
void CMockExpectParameters_SysCtlPeripheralReset(CMOCK_SysCtlPeripheralReset_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral)
{
  cmock_call_instance->Expected_ui32Peripheral = ui32Peripheral;
}

void SysCtlPeripheralReset_CMockIgnore(void)
{
  Mock.SysCtlPeripheralReset_IgnoreBool = (char)1;
}

void SysCtlPeripheralReset_CMockStopIgnore(void)
{
  Mock.SysCtlPeripheralReset_IgnoreBool = (char)0;
}

void SysCtlPeripheralReset_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Peripheral)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPeripheralReset_CALL_INSTANCE));
  CMOCK_SysCtlPeripheralReset_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPeripheralReset_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPeripheralReset_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPeripheralReset_CallInstance, cmock_guts_index);
  Mock.SysCtlPeripheralReset_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlPeripheralReset(cmock_call_instance, ui32Peripheral);
}

void SysCtlPeripheralReset_AddCallback(CMOCK_SysCtlPeripheralReset_CALLBACK Callback)
{
  Mock.SysCtlPeripheralReset_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralReset_CallbackBool = (char)1;
  Mock.SysCtlPeripheralReset_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralReset_Stub(CMOCK_SysCtlPeripheralReset_CALLBACK Callback)
{
  Mock.SysCtlPeripheralReset_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralReset_CallbackBool = (char)0;
  Mock.SysCtlPeripheralReset_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralEnable(uint32_t ui32Peripheral)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPeripheralEnable_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPeripheralEnable);
  cmock_call_instance = (CMOCK_SysCtlPeripheralEnable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPeripheralEnable_CallInstance);
  Mock.SysCtlPeripheralEnable_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPeripheralEnable_CallInstance);
  if (Mock.SysCtlPeripheralEnable_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlPeripheralEnable_CallbackBool &&
      Mock.SysCtlPeripheralEnable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralEnable_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralEnable_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlPeripheralEnable,CMockString_ui32Peripheral);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Peripheral, ui32Peripheral, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlPeripheralEnable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralEnable_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralEnable_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlPeripheralEnable(CMOCK_SysCtlPeripheralEnable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral);
void CMockExpectParameters_SysCtlPeripheralEnable(CMOCK_SysCtlPeripheralEnable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral)
{
  cmock_call_instance->Expected_ui32Peripheral = ui32Peripheral;
}

void SysCtlPeripheralEnable_CMockIgnore(void)
{
  Mock.SysCtlPeripheralEnable_IgnoreBool = (char)1;
}

void SysCtlPeripheralEnable_CMockStopIgnore(void)
{
  Mock.SysCtlPeripheralEnable_IgnoreBool = (char)0;
}

void SysCtlPeripheralEnable_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Peripheral)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPeripheralEnable_CALL_INSTANCE));
  CMOCK_SysCtlPeripheralEnable_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPeripheralEnable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPeripheralEnable_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPeripheralEnable_CallInstance, cmock_guts_index);
  Mock.SysCtlPeripheralEnable_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlPeripheralEnable(cmock_call_instance, ui32Peripheral);
}

void SysCtlPeripheralEnable_AddCallback(CMOCK_SysCtlPeripheralEnable_CALLBACK Callback)
{
  Mock.SysCtlPeripheralEnable_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralEnable_CallbackBool = (char)1;
  Mock.SysCtlPeripheralEnable_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralEnable_Stub(CMOCK_SysCtlPeripheralEnable_CALLBACK Callback)
{
  Mock.SysCtlPeripheralEnable_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralEnable_CallbackBool = (char)0;
  Mock.SysCtlPeripheralEnable_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralDisable(uint32_t ui32Peripheral)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPeripheralDisable_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPeripheralDisable);
  cmock_call_instance = (CMOCK_SysCtlPeripheralDisable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPeripheralDisable_CallInstance);
  Mock.SysCtlPeripheralDisable_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPeripheralDisable_CallInstance);
  if (Mock.SysCtlPeripheralDisable_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlPeripheralDisable_CallbackBool &&
      Mock.SysCtlPeripheralDisable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralDisable_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralDisable_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlPeripheralDisable,CMockString_ui32Peripheral);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Peripheral, ui32Peripheral, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlPeripheralDisable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralDisable_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralDisable_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlPeripheralDisable(CMOCK_SysCtlPeripheralDisable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral);
void CMockExpectParameters_SysCtlPeripheralDisable(CMOCK_SysCtlPeripheralDisable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral)
{
  cmock_call_instance->Expected_ui32Peripheral = ui32Peripheral;
}

void SysCtlPeripheralDisable_CMockIgnore(void)
{
  Mock.SysCtlPeripheralDisable_IgnoreBool = (char)1;
}

void SysCtlPeripheralDisable_CMockStopIgnore(void)
{
  Mock.SysCtlPeripheralDisable_IgnoreBool = (char)0;
}

void SysCtlPeripheralDisable_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Peripheral)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPeripheralDisable_CALL_INSTANCE));
  CMOCK_SysCtlPeripheralDisable_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPeripheralDisable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPeripheralDisable_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPeripheralDisable_CallInstance, cmock_guts_index);
  Mock.SysCtlPeripheralDisable_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlPeripheralDisable(cmock_call_instance, ui32Peripheral);
}

void SysCtlPeripheralDisable_AddCallback(CMOCK_SysCtlPeripheralDisable_CALLBACK Callback)
{
  Mock.SysCtlPeripheralDisable_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralDisable_CallbackBool = (char)1;
  Mock.SysCtlPeripheralDisable_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralDisable_Stub(CMOCK_SysCtlPeripheralDisable_CALLBACK Callback)
{
  Mock.SysCtlPeripheralDisable_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralDisable_CallbackBool = (char)0;
  Mock.SysCtlPeripheralDisable_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralSleepEnable(uint32_t ui32Peripheral)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPeripheralSleepEnable_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPeripheralSleepEnable);
  cmock_call_instance = (CMOCK_SysCtlPeripheralSleepEnable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPeripheralSleepEnable_CallInstance);
  Mock.SysCtlPeripheralSleepEnable_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPeripheralSleepEnable_CallInstance);
  if (Mock.SysCtlPeripheralSleepEnable_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlPeripheralSleepEnable_CallbackBool &&
      Mock.SysCtlPeripheralSleepEnable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralSleepEnable_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralSleepEnable_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlPeripheralSleepEnable,CMockString_ui32Peripheral);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Peripheral, ui32Peripheral, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlPeripheralSleepEnable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralSleepEnable_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralSleepEnable_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlPeripheralSleepEnable(CMOCK_SysCtlPeripheralSleepEnable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral);
void CMockExpectParameters_SysCtlPeripheralSleepEnable(CMOCK_SysCtlPeripheralSleepEnable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral)
{
  cmock_call_instance->Expected_ui32Peripheral = ui32Peripheral;
}

void SysCtlPeripheralSleepEnable_CMockIgnore(void)
{
  Mock.SysCtlPeripheralSleepEnable_IgnoreBool = (char)1;
}

void SysCtlPeripheralSleepEnable_CMockStopIgnore(void)
{
  Mock.SysCtlPeripheralSleepEnable_IgnoreBool = (char)0;
}

void SysCtlPeripheralSleepEnable_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Peripheral)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPeripheralSleepEnable_CALL_INSTANCE));
  CMOCK_SysCtlPeripheralSleepEnable_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPeripheralSleepEnable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPeripheralSleepEnable_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPeripheralSleepEnable_CallInstance, cmock_guts_index);
  Mock.SysCtlPeripheralSleepEnable_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlPeripheralSleepEnable(cmock_call_instance, ui32Peripheral);
}

void SysCtlPeripheralSleepEnable_AddCallback(CMOCK_SysCtlPeripheralSleepEnable_CALLBACK Callback)
{
  Mock.SysCtlPeripheralSleepEnable_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralSleepEnable_CallbackBool = (char)1;
  Mock.SysCtlPeripheralSleepEnable_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralSleepEnable_Stub(CMOCK_SysCtlPeripheralSleepEnable_CALLBACK Callback)
{
  Mock.SysCtlPeripheralSleepEnable_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralSleepEnable_CallbackBool = (char)0;
  Mock.SysCtlPeripheralSleepEnable_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralSleepDisable(uint32_t ui32Peripheral)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPeripheralSleepDisable_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPeripheralSleepDisable);
  cmock_call_instance = (CMOCK_SysCtlPeripheralSleepDisable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPeripheralSleepDisable_CallInstance);
  Mock.SysCtlPeripheralSleepDisable_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPeripheralSleepDisable_CallInstance);
  if (Mock.SysCtlPeripheralSleepDisable_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlPeripheralSleepDisable_CallbackBool &&
      Mock.SysCtlPeripheralSleepDisable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralSleepDisable_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralSleepDisable_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlPeripheralSleepDisable,CMockString_ui32Peripheral);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Peripheral, ui32Peripheral, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlPeripheralSleepDisable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralSleepDisable_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralSleepDisable_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlPeripheralSleepDisable(CMOCK_SysCtlPeripheralSleepDisable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral);
void CMockExpectParameters_SysCtlPeripheralSleepDisable(CMOCK_SysCtlPeripheralSleepDisable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral)
{
  cmock_call_instance->Expected_ui32Peripheral = ui32Peripheral;
}

void SysCtlPeripheralSleepDisable_CMockIgnore(void)
{
  Mock.SysCtlPeripheralSleepDisable_IgnoreBool = (char)1;
}

void SysCtlPeripheralSleepDisable_CMockStopIgnore(void)
{
  Mock.SysCtlPeripheralSleepDisable_IgnoreBool = (char)0;
}

void SysCtlPeripheralSleepDisable_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Peripheral)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPeripheralSleepDisable_CALL_INSTANCE));
  CMOCK_SysCtlPeripheralSleepDisable_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPeripheralSleepDisable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPeripheralSleepDisable_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPeripheralSleepDisable_CallInstance, cmock_guts_index);
  Mock.SysCtlPeripheralSleepDisable_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlPeripheralSleepDisable(cmock_call_instance, ui32Peripheral);
}

void SysCtlPeripheralSleepDisable_AddCallback(CMOCK_SysCtlPeripheralSleepDisable_CALLBACK Callback)
{
  Mock.SysCtlPeripheralSleepDisable_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralSleepDisable_CallbackBool = (char)1;
  Mock.SysCtlPeripheralSleepDisable_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralSleepDisable_Stub(CMOCK_SysCtlPeripheralSleepDisable_CALLBACK Callback)
{
  Mock.SysCtlPeripheralSleepDisable_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralSleepDisable_CallbackBool = (char)0;
  Mock.SysCtlPeripheralSleepDisable_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralDeepSleepEnable(uint32_t ui32Peripheral)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPeripheralDeepSleepEnable_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPeripheralDeepSleepEnable);
  cmock_call_instance = (CMOCK_SysCtlPeripheralDeepSleepEnable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPeripheralDeepSleepEnable_CallInstance);
  Mock.SysCtlPeripheralDeepSleepEnable_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPeripheralDeepSleepEnable_CallInstance);
  if (Mock.SysCtlPeripheralDeepSleepEnable_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlPeripheralDeepSleepEnable_CallbackBool &&
      Mock.SysCtlPeripheralDeepSleepEnable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralDeepSleepEnable_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralDeepSleepEnable_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlPeripheralDeepSleepEnable,CMockString_ui32Peripheral);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Peripheral, ui32Peripheral, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlPeripheralDeepSleepEnable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralDeepSleepEnable_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralDeepSleepEnable_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlPeripheralDeepSleepEnable(CMOCK_SysCtlPeripheralDeepSleepEnable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral);
void CMockExpectParameters_SysCtlPeripheralDeepSleepEnable(CMOCK_SysCtlPeripheralDeepSleepEnable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral)
{
  cmock_call_instance->Expected_ui32Peripheral = ui32Peripheral;
}

void SysCtlPeripheralDeepSleepEnable_CMockIgnore(void)
{
  Mock.SysCtlPeripheralDeepSleepEnable_IgnoreBool = (char)1;
}

void SysCtlPeripheralDeepSleepEnable_CMockStopIgnore(void)
{
  Mock.SysCtlPeripheralDeepSleepEnable_IgnoreBool = (char)0;
}

void SysCtlPeripheralDeepSleepEnable_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Peripheral)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPeripheralDeepSleepEnable_CALL_INSTANCE));
  CMOCK_SysCtlPeripheralDeepSleepEnable_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPeripheralDeepSleepEnable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPeripheralDeepSleepEnable_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPeripheralDeepSleepEnable_CallInstance, cmock_guts_index);
  Mock.SysCtlPeripheralDeepSleepEnable_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlPeripheralDeepSleepEnable(cmock_call_instance, ui32Peripheral);
}

void SysCtlPeripheralDeepSleepEnable_AddCallback(CMOCK_SysCtlPeripheralDeepSleepEnable_CALLBACK Callback)
{
  Mock.SysCtlPeripheralDeepSleepEnable_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralDeepSleepEnable_CallbackBool = (char)1;
  Mock.SysCtlPeripheralDeepSleepEnable_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralDeepSleepEnable_Stub(CMOCK_SysCtlPeripheralDeepSleepEnable_CALLBACK Callback)
{
  Mock.SysCtlPeripheralDeepSleepEnable_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralDeepSleepEnable_CallbackBool = (char)0;
  Mock.SysCtlPeripheralDeepSleepEnable_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralDeepSleepDisable(uint32_t ui32Peripheral)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPeripheralDeepSleepDisable_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPeripheralDeepSleepDisable);
  cmock_call_instance = (CMOCK_SysCtlPeripheralDeepSleepDisable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPeripheralDeepSleepDisable_CallInstance);
  Mock.SysCtlPeripheralDeepSleepDisable_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPeripheralDeepSleepDisable_CallInstance);
  if (Mock.SysCtlPeripheralDeepSleepDisable_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlPeripheralDeepSleepDisable_CallbackBool &&
      Mock.SysCtlPeripheralDeepSleepDisable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralDeepSleepDisable_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralDeepSleepDisable_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlPeripheralDeepSleepDisable,CMockString_ui32Peripheral);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Peripheral, ui32Peripheral, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlPeripheralDeepSleepDisable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralDeepSleepDisable_CallbackFunctionPointer(ui32Peripheral, Mock.SysCtlPeripheralDeepSleepDisable_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlPeripheralDeepSleepDisable(CMOCK_SysCtlPeripheralDeepSleepDisable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral);
void CMockExpectParameters_SysCtlPeripheralDeepSleepDisable(CMOCK_SysCtlPeripheralDeepSleepDisable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Peripheral)
{
  cmock_call_instance->Expected_ui32Peripheral = ui32Peripheral;
}

void SysCtlPeripheralDeepSleepDisable_CMockIgnore(void)
{
  Mock.SysCtlPeripheralDeepSleepDisable_IgnoreBool = (char)1;
}

void SysCtlPeripheralDeepSleepDisable_CMockStopIgnore(void)
{
  Mock.SysCtlPeripheralDeepSleepDisable_IgnoreBool = (char)0;
}

void SysCtlPeripheralDeepSleepDisable_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Peripheral)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPeripheralDeepSleepDisable_CALL_INSTANCE));
  CMOCK_SysCtlPeripheralDeepSleepDisable_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPeripheralDeepSleepDisable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPeripheralDeepSleepDisable_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPeripheralDeepSleepDisable_CallInstance, cmock_guts_index);
  Mock.SysCtlPeripheralDeepSleepDisable_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlPeripheralDeepSleepDisable(cmock_call_instance, ui32Peripheral);
}

void SysCtlPeripheralDeepSleepDisable_AddCallback(CMOCK_SysCtlPeripheralDeepSleepDisable_CALLBACK Callback)
{
  Mock.SysCtlPeripheralDeepSleepDisable_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralDeepSleepDisable_CallbackBool = (char)1;
  Mock.SysCtlPeripheralDeepSleepDisable_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralDeepSleepDisable_Stub(CMOCK_SysCtlPeripheralDeepSleepDisable_CALLBACK Callback)
{
  Mock.SysCtlPeripheralDeepSleepDisable_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralDeepSleepDisable_CallbackBool = (char)0;
  Mock.SysCtlPeripheralDeepSleepDisable_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralClockGating(bool bEnable)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPeripheralClockGating_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPeripheralClockGating);
  cmock_call_instance = (CMOCK_SysCtlPeripheralClockGating_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPeripheralClockGating_CallInstance);
  Mock.SysCtlPeripheralClockGating_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPeripheralClockGating_CallInstance);
  if (Mock.SysCtlPeripheralClockGating_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlPeripheralClockGating_CallbackBool &&
      Mock.SysCtlPeripheralClockGating_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralClockGating_CallbackFunctionPointer(bEnable, Mock.SysCtlPeripheralClockGating_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlPeripheralClockGating,CMockString_bEnable);
    UNITY_TEST_ASSERT_EQUAL_UINT8(cmock_call_instance->Expected_bEnable, bEnable, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlPeripheralClockGating_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPeripheralClockGating_CallbackFunctionPointer(bEnable, Mock.SysCtlPeripheralClockGating_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlPeripheralClockGating(CMOCK_SysCtlPeripheralClockGating_CALL_INSTANCE* cmock_call_instance, bool bEnable);
void CMockExpectParameters_SysCtlPeripheralClockGating(CMOCK_SysCtlPeripheralClockGating_CALL_INSTANCE* cmock_call_instance, bool bEnable)
{
  cmock_call_instance->Expected_bEnable = bEnable;
}

void SysCtlPeripheralClockGating_CMockIgnore(void)
{
  Mock.SysCtlPeripheralClockGating_IgnoreBool = (char)1;
}

void SysCtlPeripheralClockGating_CMockStopIgnore(void)
{
  Mock.SysCtlPeripheralClockGating_IgnoreBool = (char)0;
}

void SysCtlPeripheralClockGating_CMockExpect(UNITY_LINE_TYPE cmock_line, bool bEnable)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPeripheralClockGating_CALL_INSTANCE));
  CMOCK_SysCtlPeripheralClockGating_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPeripheralClockGating_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPeripheralClockGating_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPeripheralClockGating_CallInstance, cmock_guts_index);
  Mock.SysCtlPeripheralClockGating_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlPeripheralClockGating(cmock_call_instance, bEnable);
}

void SysCtlPeripheralClockGating_AddCallback(CMOCK_SysCtlPeripheralClockGating_CALLBACK Callback)
{
  Mock.SysCtlPeripheralClockGating_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralClockGating_CallbackBool = (char)1;
  Mock.SysCtlPeripheralClockGating_CallbackFunctionPointer = Callback;
}

void SysCtlPeripheralClockGating_Stub(CMOCK_SysCtlPeripheralClockGating_CALLBACK Callback)
{
  Mock.SysCtlPeripheralClockGating_IgnoreBool = (char)0;
  Mock.SysCtlPeripheralClockGating_CallbackBool = (char)0;
  Mock.SysCtlPeripheralClockGating_CallbackFunctionPointer = Callback;
}

void SysCtlIntRegister(cmock_sysctl_func_ptr1 pfnHandler)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlIntRegister_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlIntRegister);
  cmock_call_instance = (CMOCK_SysCtlIntRegister_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlIntRegister_CallInstance);
  Mock.SysCtlIntRegister_CallInstance = CMock_Guts_MemNext(Mock.SysCtlIntRegister_CallInstance);
  if (Mock.SysCtlIntRegister_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlIntRegister_CallbackBool &&
      Mock.SysCtlIntRegister_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlIntRegister_CallbackFunctionPointer(pfnHandler, Mock.SysCtlIntRegister_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlIntRegister,CMockString_pfnHandler);
    UNITY_TEST_ASSERT_EQUAL_PTR(cmock_call_instance->Expected_pfnHandler, pfnHandler, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlIntRegister_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlIntRegister_CallbackFunctionPointer(pfnHandler, Mock.SysCtlIntRegister_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlIntRegister(CMOCK_SysCtlIntRegister_CALL_INSTANCE* cmock_call_instance, cmock_sysctl_func_ptr1 pfnHandler);
void CMockExpectParameters_SysCtlIntRegister(CMOCK_SysCtlIntRegister_CALL_INSTANCE* cmock_call_instance, cmock_sysctl_func_ptr1 pfnHandler)
{
  memcpy((void*)(&cmock_call_instance->Expected_pfnHandler), (void*)(&pfnHandler),
         sizeof(cmock_sysctl_func_ptr1[sizeof(pfnHandler) == sizeof(cmock_sysctl_func_ptr1) ? 1 : -1])); /* add cmock_sysctl_func_ptr1 to :treat_as_array if this causes an error */
}

void SysCtlIntRegister_CMockIgnore(void)
{
  Mock.SysCtlIntRegister_IgnoreBool = (char)1;
}

void SysCtlIntRegister_CMockStopIgnore(void)
{
  Mock.SysCtlIntRegister_IgnoreBool = (char)0;
}

void SysCtlIntRegister_CMockExpect(UNITY_LINE_TYPE cmock_line, cmock_sysctl_func_ptr1 pfnHandler)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlIntRegister_CALL_INSTANCE));
  CMOCK_SysCtlIntRegister_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlIntRegister_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlIntRegister_CallInstance = CMock_Guts_MemChain(Mock.SysCtlIntRegister_CallInstance, cmock_guts_index);
  Mock.SysCtlIntRegister_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlIntRegister(cmock_call_instance, pfnHandler);
}

void SysCtlIntRegister_AddCallback(CMOCK_SysCtlIntRegister_CALLBACK Callback)
{
  Mock.SysCtlIntRegister_IgnoreBool = (char)0;
  Mock.SysCtlIntRegister_CallbackBool = (char)1;
  Mock.SysCtlIntRegister_CallbackFunctionPointer = Callback;
}

void SysCtlIntRegister_Stub(CMOCK_SysCtlIntRegister_CALLBACK Callback)
{
  Mock.SysCtlIntRegister_IgnoreBool = (char)0;
  Mock.SysCtlIntRegister_CallbackBool = (char)0;
  Mock.SysCtlIntRegister_CallbackFunctionPointer = Callback;
}

void SysCtlIntUnregister(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlIntUnregister_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlIntUnregister);
  cmock_call_instance = (CMOCK_SysCtlIntUnregister_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlIntUnregister_CallInstance);
  Mock.SysCtlIntUnregister_CallInstance = CMock_Guts_MemNext(Mock.SysCtlIntUnregister_CallInstance);
  if (Mock.SysCtlIntUnregister_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlIntUnregister_CallbackBool &&
      Mock.SysCtlIntUnregister_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlIntUnregister_CallbackFunctionPointer(Mock.SysCtlIntUnregister_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlIntUnregister_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlIntUnregister_CallbackFunctionPointer(Mock.SysCtlIntUnregister_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void SysCtlIntUnregister_CMockIgnore(void)
{
  Mock.SysCtlIntUnregister_IgnoreBool = (char)1;
}

void SysCtlIntUnregister_CMockStopIgnore(void)
{
  Mock.SysCtlIntUnregister_IgnoreBool = (char)0;
}

void SysCtlIntUnregister_CMockExpect(UNITY_LINE_TYPE cmock_line)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlIntUnregister_CALL_INSTANCE));
  CMOCK_SysCtlIntUnregister_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlIntUnregister_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlIntUnregister_CallInstance = CMock_Guts_MemChain(Mock.SysCtlIntUnregister_CallInstance, cmock_guts_index);
  Mock.SysCtlIntUnregister_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
}

void SysCtlIntUnregister_AddCallback(CMOCK_SysCtlIntUnregister_CALLBACK Callback)
{
  Mock.SysCtlIntUnregister_IgnoreBool = (char)0;
  Mock.SysCtlIntUnregister_CallbackBool = (char)1;
  Mock.SysCtlIntUnregister_CallbackFunctionPointer = Callback;
}

void SysCtlIntUnregister_Stub(CMOCK_SysCtlIntUnregister_CALLBACK Callback)
{
  Mock.SysCtlIntUnregister_IgnoreBool = (char)0;
  Mock.SysCtlIntUnregister_CallbackBool = (char)0;
  Mock.SysCtlIntUnregister_CallbackFunctionPointer = Callback;
}

void SysCtlIntEnable(uint32_t ui32Ints)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlIntEnable_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlIntEnable);
  cmock_call_instance = (CMOCK_SysCtlIntEnable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlIntEnable_CallInstance);
  Mock.SysCtlIntEnable_CallInstance = CMock_Guts_MemNext(Mock.SysCtlIntEnable_CallInstance);
  if (Mock.SysCtlIntEnable_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlIntEnable_CallbackBool &&
      Mock.SysCtlIntEnable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlIntEnable_CallbackFunctionPointer(ui32Ints, Mock.SysCtlIntEnable_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlIntEnable,CMockString_ui32Ints);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Ints, ui32Ints, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlIntEnable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlIntEnable_CallbackFunctionPointer(ui32Ints, Mock.SysCtlIntEnable_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlIntEnable(CMOCK_SysCtlIntEnable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Ints);
void CMockExpectParameters_SysCtlIntEnable(CMOCK_SysCtlIntEnable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Ints)
{
  cmock_call_instance->Expected_ui32Ints = ui32Ints;
}

void SysCtlIntEnable_CMockIgnore(void)
{
  Mock.SysCtlIntEnable_IgnoreBool = (char)1;
}

void SysCtlIntEnable_CMockStopIgnore(void)
{
  Mock.SysCtlIntEnable_IgnoreBool = (char)0;
}

void SysCtlIntEnable_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Ints)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlIntEnable_CALL_INSTANCE));
  CMOCK_SysCtlIntEnable_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlIntEnable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlIntEnable_CallInstance = CMock_Guts_MemChain(Mock.SysCtlIntEnable_CallInstance, cmock_guts_index);
  Mock.SysCtlIntEnable_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlIntEnable(cmock_call_instance, ui32Ints);
}

void SysCtlIntEnable_AddCallback(CMOCK_SysCtlIntEnable_CALLBACK Callback)
{
  Mock.SysCtlIntEnable_IgnoreBool = (char)0;
  Mock.SysCtlIntEnable_CallbackBool = (char)1;
  Mock.SysCtlIntEnable_CallbackFunctionPointer = Callback;
}

void SysCtlIntEnable_Stub(CMOCK_SysCtlIntEnable_CALLBACK Callback)
{
  Mock.SysCtlIntEnable_IgnoreBool = (char)0;
  Mock.SysCtlIntEnable_CallbackBool = (char)0;
  Mock.SysCtlIntEnable_CallbackFunctionPointer = Callback;
}

void SysCtlIntDisable(uint32_t ui32Ints)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlIntDisable_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlIntDisable);
  cmock_call_instance = (CMOCK_SysCtlIntDisable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlIntDisable_CallInstance);
  Mock.SysCtlIntDisable_CallInstance = CMock_Guts_MemNext(Mock.SysCtlIntDisable_CallInstance);
  if (Mock.SysCtlIntDisable_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlIntDisable_CallbackBool &&
      Mock.SysCtlIntDisable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlIntDisable_CallbackFunctionPointer(ui32Ints, Mock.SysCtlIntDisable_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlIntDisable,CMockString_ui32Ints);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Ints, ui32Ints, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlIntDisable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlIntDisable_CallbackFunctionPointer(ui32Ints, Mock.SysCtlIntDisable_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlIntDisable(CMOCK_SysCtlIntDisable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Ints);
void CMockExpectParameters_SysCtlIntDisable(CMOCK_SysCtlIntDisable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Ints)
{
  cmock_call_instance->Expected_ui32Ints = ui32Ints;
}

void SysCtlIntDisable_CMockIgnore(void)
{
  Mock.SysCtlIntDisable_IgnoreBool = (char)1;
}

void SysCtlIntDisable_CMockStopIgnore(void)
{
  Mock.SysCtlIntDisable_IgnoreBool = (char)0;
}

void SysCtlIntDisable_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Ints)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlIntDisable_CALL_INSTANCE));
  CMOCK_SysCtlIntDisable_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlIntDisable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlIntDisable_CallInstance = CMock_Guts_MemChain(Mock.SysCtlIntDisable_CallInstance, cmock_guts_index);
  Mock.SysCtlIntDisable_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlIntDisable(cmock_call_instance, ui32Ints);
}

void SysCtlIntDisable_AddCallback(CMOCK_SysCtlIntDisable_CALLBACK Callback)
{
  Mock.SysCtlIntDisable_IgnoreBool = (char)0;
  Mock.SysCtlIntDisable_CallbackBool = (char)1;
  Mock.SysCtlIntDisable_CallbackFunctionPointer = Callback;
}

void SysCtlIntDisable_Stub(CMOCK_SysCtlIntDisable_CALLBACK Callback)
{
  Mock.SysCtlIntDisable_IgnoreBool = (char)0;
  Mock.SysCtlIntDisable_CallbackBool = (char)0;
  Mock.SysCtlIntDisable_CallbackFunctionPointer = Callback;
}

void SysCtlIntClear(uint32_t ui32Ints)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlIntClear_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlIntClear);
  cmock_call_instance = (CMOCK_SysCtlIntClear_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlIntClear_CallInstance);
  Mock.SysCtlIntClear_CallInstance = CMock_Guts_MemNext(Mock.SysCtlIntClear_CallInstance);
  if (Mock.SysCtlIntClear_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlIntClear_CallbackBool &&
      Mock.SysCtlIntClear_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlIntClear_CallbackFunctionPointer(ui32Ints, Mock.SysCtlIntClear_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlIntClear,CMockString_ui32Ints);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Ints, ui32Ints, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlIntClear_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlIntClear_CallbackFunctionPointer(ui32Ints, Mock.SysCtlIntClear_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlIntClear(CMOCK_SysCtlIntClear_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Ints);
void CMockExpectParameters_SysCtlIntClear(CMOCK_SysCtlIntClear_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Ints)
{
  cmock_call_instance->Expected_ui32Ints = ui32Ints;
}

void SysCtlIntClear_CMockIgnore(void)
{
  Mock.SysCtlIntClear_IgnoreBool = (char)1;
}

void SysCtlIntClear_CMockStopIgnore(void)
{
  Mock.SysCtlIntClear_IgnoreBool = (char)0;
}

void SysCtlIntClear_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Ints)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlIntClear_CALL_INSTANCE));
  CMOCK_SysCtlIntClear_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlIntClear_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlIntClear_CallInstance = CMock_Guts_MemChain(Mock.SysCtlIntClear_CallInstance, cmock_guts_index);
  Mock.SysCtlIntClear_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlIntClear(cmock_call_instance, ui32Ints);
}

void SysCtlIntClear_AddCallback(CMOCK_SysCtlIntClear_CALLBACK Callback)
{
  Mock.SysCtlIntClear_IgnoreBool = (char)0;
  Mock.SysCtlIntClear_CallbackBool = (char)1;
  Mock.SysCtlIntClear_CallbackFunctionPointer = Callback;
}

void SysCtlIntClear_Stub(CMOCK_SysCtlIntClear_CALLBACK Callback)
{
  Mock.SysCtlIntClear_IgnoreBool = (char)0;
  Mock.SysCtlIntClear_CallbackBool = (char)0;
  Mock.SysCtlIntClear_CallbackFunctionPointer = Callback;
}

uint32_t SysCtlIntStatus(bool bMasked)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlIntStatus_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlIntStatus);
  cmock_call_instance = (CMOCK_SysCtlIntStatus_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlIntStatus_CallInstance);
  Mock.SysCtlIntStatus_CallInstance = CMock_Guts_MemNext(Mock.SysCtlIntStatus_CallInstance);
  if (Mock.SysCtlIntStatus_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlIntStatus_FinalReturn;
    Mock.SysCtlIntStatus_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlIntStatus_CallbackBool &&
      Mock.SysCtlIntStatus_CallbackFunctionPointer != NULL)
  {
    uint32_t cmock_cb_ret = Mock.SysCtlIntStatus_CallbackFunctionPointer(bMasked, Mock.SysCtlIntStatus_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlIntStatus,CMockString_bMasked);
    UNITY_TEST_ASSERT_EQUAL_UINT8(cmock_call_instance->Expected_bMasked, bMasked, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlIntStatus_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlIntStatus_CallbackFunctionPointer(bMasked, Mock.SysCtlIntStatus_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void CMockExpectParameters_SysCtlIntStatus(CMOCK_SysCtlIntStatus_CALL_INSTANCE* cmock_call_instance, bool bMasked);
void CMockExpectParameters_SysCtlIntStatus(CMOCK_SysCtlIntStatus_CALL_INSTANCE* cmock_call_instance, bool bMasked)
{
  cmock_call_instance->Expected_bMasked = bMasked;
}

void SysCtlIntStatus_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlIntStatus_CALL_INSTANCE));
  CMOCK_SysCtlIntStatus_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlIntStatus_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlIntStatus_CallInstance = CMock_Guts_MemChain(Mock.SysCtlIntStatus_CallInstance, cmock_guts_index);
  Mock.SysCtlIntStatus_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlIntStatus_IgnoreBool = (char)1;
}

void SysCtlIntStatus_CMockStopIgnore(void)
{
  if(Mock.SysCtlIntStatus_IgnoreBool)
    Mock.SysCtlIntStatus_CallInstance = CMock_Guts_MemNext(Mock.SysCtlIntStatus_CallInstance);
  Mock.SysCtlIntStatus_IgnoreBool = (char)0;
}

void SysCtlIntStatus_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, bool bMasked, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlIntStatus_CALL_INSTANCE));
  CMOCK_SysCtlIntStatus_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlIntStatus_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlIntStatus_CallInstance = CMock_Guts_MemChain(Mock.SysCtlIntStatus_CallInstance, cmock_guts_index);
  Mock.SysCtlIntStatus_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlIntStatus(cmock_call_instance, bMasked);
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlIntStatus_AddCallback(CMOCK_SysCtlIntStatus_CALLBACK Callback)
{
  Mock.SysCtlIntStatus_IgnoreBool = (char)0;
  Mock.SysCtlIntStatus_CallbackBool = (char)1;
  Mock.SysCtlIntStatus_CallbackFunctionPointer = Callback;
}

void SysCtlIntStatus_Stub(CMOCK_SysCtlIntStatus_CALLBACK Callback)
{
  Mock.SysCtlIntStatus_IgnoreBool = (char)0;
  Mock.SysCtlIntStatus_CallbackBool = (char)0;
  Mock.SysCtlIntStatus_CallbackFunctionPointer = Callback;
}

void SysCtlLDOSleepSet(uint32_t ui32Voltage)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlLDOSleepSet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlLDOSleepSet);
  cmock_call_instance = (CMOCK_SysCtlLDOSleepSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlLDOSleepSet_CallInstance);
  Mock.SysCtlLDOSleepSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlLDOSleepSet_CallInstance);
  if (Mock.SysCtlLDOSleepSet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlLDOSleepSet_CallbackBool &&
      Mock.SysCtlLDOSleepSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlLDOSleepSet_CallbackFunctionPointer(ui32Voltage, Mock.SysCtlLDOSleepSet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlLDOSleepSet,CMockString_ui32Voltage);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Voltage, ui32Voltage, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlLDOSleepSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlLDOSleepSet_CallbackFunctionPointer(ui32Voltage, Mock.SysCtlLDOSleepSet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlLDOSleepSet(CMOCK_SysCtlLDOSleepSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Voltage);
void CMockExpectParameters_SysCtlLDOSleepSet(CMOCK_SysCtlLDOSleepSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Voltage)
{
  cmock_call_instance->Expected_ui32Voltage = ui32Voltage;
}

void SysCtlLDOSleepSet_CMockIgnore(void)
{
  Mock.SysCtlLDOSleepSet_IgnoreBool = (char)1;
}

void SysCtlLDOSleepSet_CMockStopIgnore(void)
{
  Mock.SysCtlLDOSleepSet_IgnoreBool = (char)0;
}

void SysCtlLDOSleepSet_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Voltage)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlLDOSleepSet_CALL_INSTANCE));
  CMOCK_SysCtlLDOSleepSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlLDOSleepSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlLDOSleepSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlLDOSleepSet_CallInstance, cmock_guts_index);
  Mock.SysCtlLDOSleepSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlLDOSleepSet(cmock_call_instance, ui32Voltage);
}

void SysCtlLDOSleepSet_AddCallback(CMOCK_SysCtlLDOSleepSet_CALLBACK Callback)
{
  Mock.SysCtlLDOSleepSet_IgnoreBool = (char)0;
  Mock.SysCtlLDOSleepSet_CallbackBool = (char)1;
  Mock.SysCtlLDOSleepSet_CallbackFunctionPointer = Callback;
}

void SysCtlLDOSleepSet_Stub(CMOCK_SysCtlLDOSleepSet_CALLBACK Callback)
{
  Mock.SysCtlLDOSleepSet_IgnoreBool = (char)0;
  Mock.SysCtlLDOSleepSet_CallbackBool = (char)0;
  Mock.SysCtlLDOSleepSet_CallbackFunctionPointer = Callback;
}

uint32_t SysCtlLDOSleepGet(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlLDOSleepGet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlLDOSleepGet);
  cmock_call_instance = (CMOCK_SysCtlLDOSleepGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlLDOSleepGet_CallInstance);
  Mock.SysCtlLDOSleepGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlLDOSleepGet_CallInstance);
  if (Mock.SysCtlLDOSleepGet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlLDOSleepGet_FinalReturn;
    Mock.SysCtlLDOSleepGet_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlLDOSleepGet_CallbackBool &&
      Mock.SysCtlLDOSleepGet_CallbackFunctionPointer != NULL)
  {
    uint32_t cmock_cb_ret = Mock.SysCtlLDOSleepGet_CallbackFunctionPointer(Mock.SysCtlLDOSleepGet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlLDOSleepGet_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlLDOSleepGet_CallbackFunctionPointer(Mock.SysCtlLDOSleepGet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void SysCtlLDOSleepGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlLDOSleepGet_CALL_INSTANCE));
  CMOCK_SysCtlLDOSleepGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlLDOSleepGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlLDOSleepGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlLDOSleepGet_CallInstance, cmock_guts_index);
  Mock.SysCtlLDOSleepGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlLDOSleepGet_IgnoreBool = (char)1;
}

void SysCtlLDOSleepGet_CMockStopIgnore(void)
{
  if(Mock.SysCtlLDOSleepGet_IgnoreBool)
    Mock.SysCtlLDOSleepGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlLDOSleepGet_CallInstance);
  Mock.SysCtlLDOSleepGet_IgnoreBool = (char)0;
}

void SysCtlLDOSleepGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlLDOSleepGet_CALL_INSTANCE));
  CMOCK_SysCtlLDOSleepGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlLDOSleepGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlLDOSleepGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlLDOSleepGet_CallInstance, cmock_guts_index);
  Mock.SysCtlLDOSleepGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlLDOSleepGet_AddCallback(CMOCK_SysCtlLDOSleepGet_CALLBACK Callback)
{
  Mock.SysCtlLDOSleepGet_IgnoreBool = (char)0;
  Mock.SysCtlLDOSleepGet_CallbackBool = (char)1;
  Mock.SysCtlLDOSleepGet_CallbackFunctionPointer = Callback;
}

void SysCtlLDOSleepGet_Stub(CMOCK_SysCtlLDOSleepGet_CALLBACK Callback)
{
  Mock.SysCtlLDOSleepGet_IgnoreBool = (char)0;
  Mock.SysCtlLDOSleepGet_CallbackBool = (char)0;
  Mock.SysCtlLDOSleepGet_CallbackFunctionPointer = Callback;
}

void SysCtlLDODeepSleepSet(uint32_t ui32Voltage)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlLDODeepSleepSet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlLDODeepSleepSet);
  cmock_call_instance = (CMOCK_SysCtlLDODeepSleepSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlLDODeepSleepSet_CallInstance);
  Mock.SysCtlLDODeepSleepSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlLDODeepSleepSet_CallInstance);
  if (Mock.SysCtlLDODeepSleepSet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlLDODeepSleepSet_CallbackBool &&
      Mock.SysCtlLDODeepSleepSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlLDODeepSleepSet_CallbackFunctionPointer(ui32Voltage, Mock.SysCtlLDODeepSleepSet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlLDODeepSleepSet,CMockString_ui32Voltage);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Voltage, ui32Voltage, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlLDODeepSleepSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlLDODeepSleepSet_CallbackFunctionPointer(ui32Voltage, Mock.SysCtlLDODeepSleepSet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlLDODeepSleepSet(CMOCK_SysCtlLDODeepSleepSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Voltage);
void CMockExpectParameters_SysCtlLDODeepSleepSet(CMOCK_SysCtlLDODeepSleepSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Voltage)
{
  cmock_call_instance->Expected_ui32Voltage = ui32Voltage;
}

void SysCtlLDODeepSleepSet_CMockIgnore(void)
{
  Mock.SysCtlLDODeepSleepSet_IgnoreBool = (char)1;
}

void SysCtlLDODeepSleepSet_CMockStopIgnore(void)
{
  Mock.SysCtlLDODeepSleepSet_IgnoreBool = (char)0;
}

void SysCtlLDODeepSleepSet_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Voltage)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlLDODeepSleepSet_CALL_INSTANCE));
  CMOCK_SysCtlLDODeepSleepSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlLDODeepSleepSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlLDODeepSleepSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlLDODeepSleepSet_CallInstance, cmock_guts_index);
  Mock.SysCtlLDODeepSleepSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlLDODeepSleepSet(cmock_call_instance, ui32Voltage);
}

void SysCtlLDODeepSleepSet_AddCallback(CMOCK_SysCtlLDODeepSleepSet_CALLBACK Callback)
{
  Mock.SysCtlLDODeepSleepSet_IgnoreBool = (char)0;
  Mock.SysCtlLDODeepSleepSet_CallbackBool = (char)1;
  Mock.SysCtlLDODeepSleepSet_CallbackFunctionPointer = Callback;
}

void SysCtlLDODeepSleepSet_Stub(CMOCK_SysCtlLDODeepSleepSet_CALLBACK Callback)
{
  Mock.SysCtlLDODeepSleepSet_IgnoreBool = (char)0;
  Mock.SysCtlLDODeepSleepSet_CallbackBool = (char)0;
  Mock.SysCtlLDODeepSleepSet_CallbackFunctionPointer = Callback;
}

uint32_t SysCtlLDODeepSleepGet(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlLDODeepSleepGet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlLDODeepSleepGet);
  cmock_call_instance = (CMOCK_SysCtlLDODeepSleepGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlLDODeepSleepGet_CallInstance);
  Mock.SysCtlLDODeepSleepGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlLDODeepSleepGet_CallInstance);
  if (Mock.SysCtlLDODeepSleepGet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlLDODeepSleepGet_FinalReturn;
    Mock.SysCtlLDODeepSleepGet_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlLDODeepSleepGet_CallbackBool &&
      Mock.SysCtlLDODeepSleepGet_CallbackFunctionPointer != NULL)
  {
    uint32_t cmock_cb_ret = Mock.SysCtlLDODeepSleepGet_CallbackFunctionPointer(Mock.SysCtlLDODeepSleepGet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlLDODeepSleepGet_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlLDODeepSleepGet_CallbackFunctionPointer(Mock.SysCtlLDODeepSleepGet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void SysCtlLDODeepSleepGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlLDODeepSleepGet_CALL_INSTANCE));
  CMOCK_SysCtlLDODeepSleepGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlLDODeepSleepGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlLDODeepSleepGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlLDODeepSleepGet_CallInstance, cmock_guts_index);
  Mock.SysCtlLDODeepSleepGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlLDODeepSleepGet_IgnoreBool = (char)1;
}

void SysCtlLDODeepSleepGet_CMockStopIgnore(void)
{
  if(Mock.SysCtlLDODeepSleepGet_IgnoreBool)
    Mock.SysCtlLDODeepSleepGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlLDODeepSleepGet_CallInstance);
  Mock.SysCtlLDODeepSleepGet_IgnoreBool = (char)0;
}

void SysCtlLDODeepSleepGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlLDODeepSleepGet_CALL_INSTANCE));
  CMOCK_SysCtlLDODeepSleepGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlLDODeepSleepGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlLDODeepSleepGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlLDODeepSleepGet_CallInstance, cmock_guts_index);
  Mock.SysCtlLDODeepSleepGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlLDODeepSleepGet_AddCallback(CMOCK_SysCtlLDODeepSleepGet_CALLBACK Callback)
{
  Mock.SysCtlLDODeepSleepGet_IgnoreBool = (char)0;
  Mock.SysCtlLDODeepSleepGet_CallbackBool = (char)1;
  Mock.SysCtlLDODeepSleepGet_CallbackFunctionPointer = Callback;
}

void SysCtlLDODeepSleepGet_Stub(CMOCK_SysCtlLDODeepSleepGet_CALLBACK Callback)
{
  Mock.SysCtlLDODeepSleepGet_IgnoreBool = (char)0;
  Mock.SysCtlLDODeepSleepGet_CallbackBool = (char)0;
  Mock.SysCtlLDODeepSleepGet_CallbackFunctionPointer = Callback;
}

void SysCtlSleepPowerSet(uint32_t ui32Config)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlSleepPowerSet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlSleepPowerSet);
  cmock_call_instance = (CMOCK_SysCtlSleepPowerSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlSleepPowerSet_CallInstance);
  Mock.SysCtlSleepPowerSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlSleepPowerSet_CallInstance);
  if (Mock.SysCtlSleepPowerSet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlSleepPowerSet_CallbackBool &&
      Mock.SysCtlSleepPowerSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlSleepPowerSet_CallbackFunctionPointer(ui32Config, Mock.SysCtlSleepPowerSet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlSleepPowerSet,CMockString_ui32Config);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Config, ui32Config, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlSleepPowerSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlSleepPowerSet_CallbackFunctionPointer(ui32Config, Mock.SysCtlSleepPowerSet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlSleepPowerSet(CMOCK_SysCtlSleepPowerSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config);
void CMockExpectParameters_SysCtlSleepPowerSet(CMOCK_SysCtlSleepPowerSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config)
{
  cmock_call_instance->Expected_ui32Config = ui32Config;
}

void SysCtlSleepPowerSet_CMockIgnore(void)
{
  Mock.SysCtlSleepPowerSet_IgnoreBool = (char)1;
}

void SysCtlSleepPowerSet_CMockStopIgnore(void)
{
  Mock.SysCtlSleepPowerSet_IgnoreBool = (char)0;
}

void SysCtlSleepPowerSet_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Config)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlSleepPowerSet_CALL_INSTANCE));
  CMOCK_SysCtlSleepPowerSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlSleepPowerSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlSleepPowerSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlSleepPowerSet_CallInstance, cmock_guts_index);
  Mock.SysCtlSleepPowerSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlSleepPowerSet(cmock_call_instance, ui32Config);
}

void SysCtlSleepPowerSet_AddCallback(CMOCK_SysCtlSleepPowerSet_CALLBACK Callback)
{
  Mock.SysCtlSleepPowerSet_IgnoreBool = (char)0;
  Mock.SysCtlSleepPowerSet_CallbackBool = (char)1;
  Mock.SysCtlSleepPowerSet_CallbackFunctionPointer = Callback;
}

void SysCtlSleepPowerSet_Stub(CMOCK_SysCtlSleepPowerSet_CALLBACK Callback)
{
  Mock.SysCtlSleepPowerSet_IgnoreBool = (char)0;
  Mock.SysCtlSleepPowerSet_CallbackBool = (char)0;
  Mock.SysCtlSleepPowerSet_CallbackFunctionPointer = Callback;
}

void SysCtlDeepSleepPowerSet(uint32_t ui32Config)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlDeepSleepPowerSet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlDeepSleepPowerSet);
  cmock_call_instance = (CMOCK_SysCtlDeepSleepPowerSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlDeepSleepPowerSet_CallInstance);
  Mock.SysCtlDeepSleepPowerSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlDeepSleepPowerSet_CallInstance);
  if (Mock.SysCtlDeepSleepPowerSet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlDeepSleepPowerSet_CallbackBool &&
      Mock.SysCtlDeepSleepPowerSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlDeepSleepPowerSet_CallbackFunctionPointer(ui32Config, Mock.SysCtlDeepSleepPowerSet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlDeepSleepPowerSet,CMockString_ui32Config);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Config, ui32Config, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlDeepSleepPowerSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlDeepSleepPowerSet_CallbackFunctionPointer(ui32Config, Mock.SysCtlDeepSleepPowerSet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlDeepSleepPowerSet(CMOCK_SysCtlDeepSleepPowerSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config);
void CMockExpectParameters_SysCtlDeepSleepPowerSet(CMOCK_SysCtlDeepSleepPowerSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config)
{
  cmock_call_instance->Expected_ui32Config = ui32Config;
}

void SysCtlDeepSleepPowerSet_CMockIgnore(void)
{
  Mock.SysCtlDeepSleepPowerSet_IgnoreBool = (char)1;
}

void SysCtlDeepSleepPowerSet_CMockStopIgnore(void)
{
  Mock.SysCtlDeepSleepPowerSet_IgnoreBool = (char)0;
}

void SysCtlDeepSleepPowerSet_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Config)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlDeepSleepPowerSet_CALL_INSTANCE));
  CMOCK_SysCtlDeepSleepPowerSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlDeepSleepPowerSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlDeepSleepPowerSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlDeepSleepPowerSet_CallInstance, cmock_guts_index);
  Mock.SysCtlDeepSleepPowerSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlDeepSleepPowerSet(cmock_call_instance, ui32Config);
}

void SysCtlDeepSleepPowerSet_AddCallback(CMOCK_SysCtlDeepSleepPowerSet_CALLBACK Callback)
{
  Mock.SysCtlDeepSleepPowerSet_IgnoreBool = (char)0;
  Mock.SysCtlDeepSleepPowerSet_CallbackBool = (char)1;
  Mock.SysCtlDeepSleepPowerSet_CallbackFunctionPointer = Callback;
}

void SysCtlDeepSleepPowerSet_Stub(CMOCK_SysCtlDeepSleepPowerSet_CALLBACK Callback)
{
  Mock.SysCtlDeepSleepPowerSet_IgnoreBool = (char)0;
  Mock.SysCtlDeepSleepPowerSet_CallbackBool = (char)0;
  Mock.SysCtlDeepSleepPowerSet_CallbackFunctionPointer = Callback;
}

void SysCtlReset(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlReset_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlReset);
  cmock_call_instance = (CMOCK_SysCtlReset_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlReset_CallInstance);
  Mock.SysCtlReset_CallInstance = CMock_Guts_MemNext(Mock.SysCtlReset_CallInstance);
  if (Mock.SysCtlReset_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlReset_CallbackBool &&
      Mock.SysCtlReset_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlReset_CallbackFunctionPointer(Mock.SysCtlReset_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlReset_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlReset_CallbackFunctionPointer(Mock.SysCtlReset_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void SysCtlReset_CMockIgnore(void)
{
  Mock.SysCtlReset_IgnoreBool = (char)1;
}

void SysCtlReset_CMockStopIgnore(void)
{
  Mock.SysCtlReset_IgnoreBool = (char)0;
}

void SysCtlReset_CMockExpect(UNITY_LINE_TYPE cmock_line)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlReset_CALL_INSTANCE));
  CMOCK_SysCtlReset_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlReset_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlReset_CallInstance = CMock_Guts_MemChain(Mock.SysCtlReset_CallInstance, cmock_guts_index);
  Mock.SysCtlReset_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
}

void SysCtlReset_AddCallback(CMOCK_SysCtlReset_CALLBACK Callback)
{
  Mock.SysCtlReset_IgnoreBool = (char)0;
  Mock.SysCtlReset_CallbackBool = (char)1;
  Mock.SysCtlReset_CallbackFunctionPointer = Callback;
}

void SysCtlReset_Stub(CMOCK_SysCtlReset_CALLBACK Callback)
{
  Mock.SysCtlReset_IgnoreBool = (char)0;
  Mock.SysCtlReset_CallbackBool = (char)0;
  Mock.SysCtlReset_CallbackFunctionPointer = Callback;
}

void SysCtlSleep(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlSleep_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlSleep);
  cmock_call_instance = (CMOCK_SysCtlSleep_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlSleep_CallInstance);
  Mock.SysCtlSleep_CallInstance = CMock_Guts_MemNext(Mock.SysCtlSleep_CallInstance);
  if (Mock.SysCtlSleep_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlSleep_CallbackBool &&
      Mock.SysCtlSleep_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlSleep_CallbackFunctionPointer(Mock.SysCtlSleep_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlSleep_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlSleep_CallbackFunctionPointer(Mock.SysCtlSleep_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void SysCtlSleep_CMockIgnore(void)
{
  Mock.SysCtlSleep_IgnoreBool = (char)1;
}

void SysCtlSleep_CMockStopIgnore(void)
{
  Mock.SysCtlSleep_IgnoreBool = (char)0;
}

void SysCtlSleep_CMockExpect(UNITY_LINE_TYPE cmock_line)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlSleep_CALL_INSTANCE));
  CMOCK_SysCtlSleep_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlSleep_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlSleep_CallInstance = CMock_Guts_MemChain(Mock.SysCtlSleep_CallInstance, cmock_guts_index);
  Mock.SysCtlSleep_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
}

void SysCtlSleep_AddCallback(CMOCK_SysCtlSleep_CALLBACK Callback)
{
  Mock.SysCtlSleep_IgnoreBool = (char)0;
  Mock.SysCtlSleep_CallbackBool = (char)1;
  Mock.SysCtlSleep_CallbackFunctionPointer = Callback;
}

void SysCtlSleep_Stub(CMOCK_SysCtlSleep_CALLBACK Callback)
{
  Mock.SysCtlSleep_IgnoreBool = (char)0;
  Mock.SysCtlSleep_CallbackBool = (char)0;
  Mock.SysCtlSleep_CallbackFunctionPointer = Callback;
}

void SysCtlDeepSleep(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlDeepSleep_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlDeepSleep);
  cmock_call_instance = (CMOCK_SysCtlDeepSleep_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlDeepSleep_CallInstance);
  Mock.SysCtlDeepSleep_CallInstance = CMock_Guts_MemNext(Mock.SysCtlDeepSleep_CallInstance);
  if (Mock.SysCtlDeepSleep_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlDeepSleep_CallbackBool &&
      Mock.SysCtlDeepSleep_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlDeepSleep_CallbackFunctionPointer(Mock.SysCtlDeepSleep_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlDeepSleep_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlDeepSleep_CallbackFunctionPointer(Mock.SysCtlDeepSleep_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void SysCtlDeepSleep_CMockIgnore(void)
{
  Mock.SysCtlDeepSleep_IgnoreBool = (char)1;
}

void SysCtlDeepSleep_CMockStopIgnore(void)
{
  Mock.SysCtlDeepSleep_IgnoreBool = (char)0;
}

void SysCtlDeepSleep_CMockExpect(UNITY_LINE_TYPE cmock_line)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlDeepSleep_CALL_INSTANCE));
  CMOCK_SysCtlDeepSleep_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlDeepSleep_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlDeepSleep_CallInstance = CMock_Guts_MemChain(Mock.SysCtlDeepSleep_CallInstance, cmock_guts_index);
  Mock.SysCtlDeepSleep_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
}

void SysCtlDeepSleep_AddCallback(CMOCK_SysCtlDeepSleep_CALLBACK Callback)
{
  Mock.SysCtlDeepSleep_IgnoreBool = (char)0;
  Mock.SysCtlDeepSleep_CallbackBool = (char)1;
  Mock.SysCtlDeepSleep_CallbackFunctionPointer = Callback;
}

void SysCtlDeepSleep_Stub(CMOCK_SysCtlDeepSleep_CALLBACK Callback)
{
  Mock.SysCtlDeepSleep_IgnoreBool = (char)0;
  Mock.SysCtlDeepSleep_CallbackBool = (char)0;
  Mock.SysCtlDeepSleep_CallbackFunctionPointer = Callback;
}

uint32_t SysCtlResetCauseGet(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlResetCauseGet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlResetCauseGet);
  cmock_call_instance = (CMOCK_SysCtlResetCauseGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlResetCauseGet_CallInstance);
  Mock.SysCtlResetCauseGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlResetCauseGet_CallInstance);
  if (Mock.SysCtlResetCauseGet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlResetCauseGet_FinalReturn;
    Mock.SysCtlResetCauseGet_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlResetCauseGet_CallbackBool &&
      Mock.SysCtlResetCauseGet_CallbackFunctionPointer != NULL)
  {
    uint32_t cmock_cb_ret = Mock.SysCtlResetCauseGet_CallbackFunctionPointer(Mock.SysCtlResetCauseGet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlResetCauseGet_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlResetCauseGet_CallbackFunctionPointer(Mock.SysCtlResetCauseGet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void SysCtlResetCauseGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlResetCauseGet_CALL_INSTANCE));
  CMOCK_SysCtlResetCauseGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlResetCauseGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlResetCauseGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlResetCauseGet_CallInstance, cmock_guts_index);
  Mock.SysCtlResetCauseGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlResetCauseGet_IgnoreBool = (char)1;
}

void SysCtlResetCauseGet_CMockStopIgnore(void)
{
  if(Mock.SysCtlResetCauseGet_IgnoreBool)
    Mock.SysCtlResetCauseGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlResetCauseGet_CallInstance);
  Mock.SysCtlResetCauseGet_IgnoreBool = (char)0;
}

void SysCtlResetCauseGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlResetCauseGet_CALL_INSTANCE));
  CMOCK_SysCtlResetCauseGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlResetCauseGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlResetCauseGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlResetCauseGet_CallInstance, cmock_guts_index);
  Mock.SysCtlResetCauseGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlResetCauseGet_AddCallback(CMOCK_SysCtlResetCauseGet_CALLBACK Callback)
{
  Mock.SysCtlResetCauseGet_IgnoreBool = (char)0;
  Mock.SysCtlResetCauseGet_CallbackBool = (char)1;
  Mock.SysCtlResetCauseGet_CallbackFunctionPointer = Callback;
}

void SysCtlResetCauseGet_Stub(CMOCK_SysCtlResetCauseGet_CALLBACK Callback)
{
  Mock.SysCtlResetCauseGet_IgnoreBool = (char)0;
  Mock.SysCtlResetCauseGet_CallbackBool = (char)0;
  Mock.SysCtlResetCauseGet_CallbackFunctionPointer = Callback;
}

void SysCtlResetCauseClear(uint32_t ui32Causes)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlResetCauseClear_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlResetCauseClear);
  cmock_call_instance = (CMOCK_SysCtlResetCauseClear_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlResetCauseClear_CallInstance);
  Mock.SysCtlResetCauseClear_CallInstance = CMock_Guts_MemNext(Mock.SysCtlResetCauseClear_CallInstance);
  if (Mock.SysCtlResetCauseClear_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlResetCauseClear_CallbackBool &&
      Mock.SysCtlResetCauseClear_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlResetCauseClear_CallbackFunctionPointer(ui32Causes, Mock.SysCtlResetCauseClear_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlResetCauseClear,CMockString_ui32Causes);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Causes, ui32Causes, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlResetCauseClear_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlResetCauseClear_CallbackFunctionPointer(ui32Causes, Mock.SysCtlResetCauseClear_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlResetCauseClear(CMOCK_SysCtlResetCauseClear_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Causes);
void CMockExpectParameters_SysCtlResetCauseClear(CMOCK_SysCtlResetCauseClear_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Causes)
{
  cmock_call_instance->Expected_ui32Causes = ui32Causes;
}

void SysCtlResetCauseClear_CMockIgnore(void)
{
  Mock.SysCtlResetCauseClear_IgnoreBool = (char)1;
}

void SysCtlResetCauseClear_CMockStopIgnore(void)
{
  Mock.SysCtlResetCauseClear_IgnoreBool = (char)0;
}

void SysCtlResetCauseClear_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Causes)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlResetCauseClear_CALL_INSTANCE));
  CMOCK_SysCtlResetCauseClear_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlResetCauseClear_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlResetCauseClear_CallInstance = CMock_Guts_MemChain(Mock.SysCtlResetCauseClear_CallInstance, cmock_guts_index);
  Mock.SysCtlResetCauseClear_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlResetCauseClear(cmock_call_instance, ui32Causes);
}

void SysCtlResetCauseClear_AddCallback(CMOCK_SysCtlResetCauseClear_CALLBACK Callback)
{
  Mock.SysCtlResetCauseClear_IgnoreBool = (char)0;
  Mock.SysCtlResetCauseClear_CallbackBool = (char)1;
  Mock.SysCtlResetCauseClear_CallbackFunctionPointer = Callback;
}

void SysCtlResetCauseClear_Stub(CMOCK_SysCtlResetCauseClear_CALLBACK Callback)
{
  Mock.SysCtlResetCauseClear_IgnoreBool = (char)0;
  Mock.SysCtlResetCauseClear_CallbackBool = (char)0;
  Mock.SysCtlResetCauseClear_CallbackFunctionPointer = Callback;
}

void SysCtlBrownOutConfigSet(uint32_t ui32Config, uint32_t ui32Delay)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlBrownOutConfigSet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlBrownOutConfigSet);
  cmock_call_instance = (CMOCK_SysCtlBrownOutConfigSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlBrownOutConfigSet_CallInstance);
  Mock.SysCtlBrownOutConfigSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlBrownOutConfigSet_CallInstance);
  if (Mock.SysCtlBrownOutConfigSet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlBrownOutConfigSet_CallbackBool &&
      Mock.SysCtlBrownOutConfigSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlBrownOutConfigSet_CallbackFunctionPointer(ui32Config, ui32Delay, Mock.SysCtlBrownOutConfigSet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlBrownOutConfigSet,CMockString_ui32Config);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Config, ui32Config, cmock_line, CMockStringMismatch);
  }
  {
    UNITY_SET_DETAILS(CMockString_SysCtlBrownOutConfigSet,CMockString_ui32Delay);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Delay, ui32Delay, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlBrownOutConfigSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlBrownOutConfigSet_CallbackFunctionPointer(ui32Config, ui32Delay, Mock.SysCtlBrownOutConfigSet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlBrownOutConfigSet(CMOCK_SysCtlBrownOutConfigSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config, uint32_t ui32Delay);
void CMockExpectParameters_SysCtlBrownOutConfigSet(CMOCK_SysCtlBrownOutConfigSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config, uint32_t ui32Delay)
{
  cmock_call_instance->Expected_ui32Config = ui32Config;
  cmock_call_instance->Expected_ui32Delay = ui32Delay;
}

void SysCtlBrownOutConfigSet_CMockIgnore(void)
{
  Mock.SysCtlBrownOutConfigSet_IgnoreBool = (char)1;
}

void SysCtlBrownOutConfigSet_CMockStopIgnore(void)
{
  Mock.SysCtlBrownOutConfigSet_IgnoreBool = (char)0;
}

void SysCtlBrownOutConfigSet_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Config, uint32_t ui32Delay)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlBrownOutConfigSet_CALL_INSTANCE));
  CMOCK_SysCtlBrownOutConfigSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlBrownOutConfigSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlBrownOutConfigSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlBrownOutConfigSet_CallInstance, cmock_guts_index);
  Mock.SysCtlBrownOutConfigSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlBrownOutConfigSet(cmock_call_instance, ui32Config, ui32Delay);
}

void SysCtlBrownOutConfigSet_AddCallback(CMOCK_SysCtlBrownOutConfigSet_CALLBACK Callback)
{
  Mock.SysCtlBrownOutConfigSet_IgnoreBool = (char)0;
  Mock.SysCtlBrownOutConfigSet_CallbackBool = (char)1;
  Mock.SysCtlBrownOutConfigSet_CallbackFunctionPointer = Callback;
}

void SysCtlBrownOutConfigSet_Stub(CMOCK_SysCtlBrownOutConfigSet_CALLBACK Callback)
{
  Mock.SysCtlBrownOutConfigSet_IgnoreBool = (char)0;
  Mock.SysCtlBrownOutConfigSet_CallbackBool = (char)0;
  Mock.SysCtlBrownOutConfigSet_CallbackFunctionPointer = Callback;
}

void SysCtlDelay(uint32_t ui32Count)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlDelay_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlDelay);
  cmock_call_instance = (CMOCK_SysCtlDelay_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlDelay_CallInstance);
  Mock.SysCtlDelay_CallInstance = CMock_Guts_MemNext(Mock.SysCtlDelay_CallInstance);
  if (Mock.SysCtlDelay_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlDelay_CallbackBool &&
      Mock.SysCtlDelay_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlDelay_CallbackFunctionPointer(ui32Count, Mock.SysCtlDelay_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlDelay,CMockString_ui32Count);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Count, ui32Count, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlDelay_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlDelay_CallbackFunctionPointer(ui32Count, Mock.SysCtlDelay_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlDelay(CMOCK_SysCtlDelay_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Count);
void CMockExpectParameters_SysCtlDelay(CMOCK_SysCtlDelay_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Count)
{
  cmock_call_instance->Expected_ui32Count = ui32Count;
}

void SysCtlDelay_CMockIgnore(void)
{
  Mock.SysCtlDelay_IgnoreBool = (char)1;
}

void SysCtlDelay_CMockStopIgnore(void)
{
  Mock.SysCtlDelay_IgnoreBool = (char)0;
}

void SysCtlDelay_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Count)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlDelay_CALL_INSTANCE));
  CMOCK_SysCtlDelay_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlDelay_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlDelay_CallInstance = CMock_Guts_MemChain(Mock.SysCtlDelay_CallInstance, cmock_guts_index);
  Mock.SysCtlDelay_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlDelay(cmock_call_instance, ui32Count);
}

void SysCtlDelay_AddCallback(CMOCK_SysCtlDelay_CALLBACK Callback)
{
  Mock.SysCtlDelay_IgnoreBool = (char)0;
  Mock.SysCtlDelay_CallbackBool = (char)1;
  Mock.SysCtlDelay_CallbackFunctionPointer = Callback;
}

void SysCtlDelay_Stub(CMOCK_SysCtlDelay_CALLBACK Callback)
{
  Mock.SysCtlDelay_IgnoreBool = (char)0;
  Mock.SysCtlDelay_CallbackBool = (char)0;
  Mock.SysCtlDelay_CallbackFunctionPointer = Callback;
}

void SysCtlMOSCConfigSet(uint32_t ui32Config)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlMOSCConfigSet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlMOSCConfigSet);
  cmock_call_instance = (CMOCK_SysCtlMOSCConfigSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlMOSCConfigSet_CallInstance);
  Mock.SysCtlMOSCConfigSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlMOSCConfigSet_CallInstance);
  if (Mock.SysCtlMOSCConfigSet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlMOSCConfigSet_CallbackBool &&
      Mock.SysCtlMOSCConfigSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlMOSCConfigSet_CallbackFunctionPointer(ui32Config, Mock.SysCtlMOSCConfigSet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlMOSCConfigSet,CMockString_ui32Config);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Config, ui32Config, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlMOSCConfigSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlMOSCConfigSet_CallbackFunctionPointer(ui32Config, Mock.SysCtlMOSCConfigSet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlMOSCConfigSet(CMOCK_SysCtlMOSCConfigSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config);
void CMockExpectParameters_SysCtlMOSCConfigSet(CMOCK_SysCtlMOSCConfigSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config)
{
  cmock_call_instance->Expected_ui32Config = ui32Config;
}

void SysCtlMOSCConfigSet_CMockIgnore(void)
{
  Mock.SysCtlMOSCConfigSet_IgnoreBool = (char)1;
}

void SysCtlMOSCConfigSet_CMockStopIgnore(void)
{
  Mock.SysCtlMOSCConfigSet_IgnoreBool = (char)0;
}

void SysCtlMOSCConfigSet_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Config)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlMOSCConfigSet_CALL_INSTANCE));
  CMOCK_SysCtlMOSCConfigSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlMOSCConfigSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlMOSCConfigSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlMOSCConfigSet_CallInstance, cmock_guts_index);
  Mock.SysCtlMOSCConfigSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlMOSCConfigSet(cmock_call_instance, ui32Config);
}

void SysCtlMOSCConfigSet_AddCallback(CMOCK_SysCtlMOSCConfigSet_CALLBACK Callback)
{
  Mock.SysCtlMOSCConfigSet_IgnoreBool = (char)0;
  Mock.SysCtlMOSCConfigSet_CallbackBool = (char)1;
  Mock.SysCtlMOSCConfigSet_CallbackFunctionPointer = Callback;
}

void SysCtlMOSCConfigSet_Stub(CMOCK_SysCtlMOSCConfigSet_CALLBACK Callback)
{
  Mock.SysCtlMOSCConfigSet_IgnoreBool = (char)0;
  Mock.SysCtlMOSCConfigSet_CallbackBool = (char)0;
  Mock.SysCtlMOSCConfigSet_CallbackFunctionPointer = Callback;
}

uint32_t SysCtlPIOSCCalibrate(uint32_t ui32Type)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPIOSCCalibrate_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPIOSCCalibrate);
  cmock_call_instance = (CMOCK_SysCtlPIOSCCalibrate_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPIOSCCalibrate_CallInstance);
  Mock.SysCtlPIOSCCalibrate_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPIOSCCalibrate_CallInstance);
  if (Mock.SysCtlPIOSCCalibrate_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlPIOSCCalibrate_FinalReturn;
    Mock.SysCtlPIOSCCalibrate_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlPIOSCCalibrate_CallbackBool &&
      Mock.SysCtlPIOSCCalibrate_CallbackFunctionPointer != NULL)
  {
    uint32_t cmock_cb_ret = Mock.SysCtlPIOSCCalibrate_CallbackFunctionPointer(ui32Type, Mock.SysCtlPIOSCCalibrate_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlPIOSCCalibrate,CMockString_ui32Type);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Type, ui32Type, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlPIOSCCalibrate_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlPIOSCCalibrate_CallbackFunctionPointer(ui32Type, Mock.SysCtlPIOSCCalibrate_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void CMockExpectParameters_SysCtlPIOSCCalibrate(CMOCK_SysCtlPIOSCCalibrate_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Type);
void CMockExpectParameters_SysCtlPIOSCCalibrate(CMOCK_SysCtlPIOSCCalibrate_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Type)
{
  cmock_call_instance->Expected_ui32Type = ui32Type;
}

void SysCtlPIOSCCalibrate_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPIOSCCalibrate_CALL_INSTANCE));
  CMOCK_SysCtlPIOSCCalibrate_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPIOSCCalibrate_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPIOSCCalibrate_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPIOSCCalibrate_CallInstance, cmock_guts_index);
  Mock.SysCtlPIOSCCalibrate_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlPIOSCCalibrate_IgnoreBool = (char)1;
}

void SysCtlPIOSCCalibrate_CMockStopIgnore(void)
{
  if(Mock.SysCtlPIOSCCalibrate_IgnoreBool)
    Mock.SysCtlPIOSCCalibrate_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPIOSCCalibrate_CallInstance);
  Mock.SysCtlPIOSCCalibrate_IgnoreBool = (char)0;
}

void SysCtlPIOSCCalibrate_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ui32Type, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPIOSCCalibrate_CALL_INSTANCE));
  CMOCK_SysCtlPIOSCCalibrate_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPIOSCCalibrate_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPIOSCCalibrate_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPIOSCCalibrate_CallInstance, cmock_guts_index);
  Mock.SysCtlPIOSCCalibrate_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlPIOSCCalibrate(cmock_call_instance, ui32Type);
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlPIOSCCalibrate_AddCallback(CMOCK_SysCtlPIOSCCalibrate_CALLBACK Callback)
{
  Mock.SysCtlPIOSCCalibrate_IgnoreBool = (char)0;
  Mock.SysCtlPIOSCCalibrate_CallbackBool = (char)1;
  Mock.SysCtlPIOSCCalibrate_CallbackFunctionPointer = Callback;
}

void SysCtlPIOSCCalibrate_Stub(CMOCK_SysCtlPIOSCCalibrate_CALLBACK Callback)
{
  Mock.SysCtlPIOSCCalibrate_IgnoreBool = (char)0;
  Mock.SysCtlPIOSCCalibrate_CallbackBool = (char)0;
  Mock.SysCtlPIOSCCalibrate_CallbackFunctionPointer = Callback;
}

void SysCtlClockSet(uint32_t ui32Config)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlClockSet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlClockSet);
  cmock_call_instance = (CMOCK_SysCtlClockSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlClockSet_CallInstance);
  Mock.SysCtlClockSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlClockSet_CallInstance);
  if (Mock.SysCtlClockSet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlClockSet_CallbackBool &&
      Mock.SysCtlClockSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlClockSet_CallbackFunctionPointer(ui32Config, Mock.SysCtlClockSet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlClockSet,CMockString_ui32Config);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Config, ui32Config, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlClockSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlClockSet_CallbackFunctionPointer(ui32Config, Mock.SysCtlClockSet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlClockSet(CMOCK_SysCtlClockSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config);
void CMockExpectParameters_SysCtlClockSet(CMOCK_SysCtlClockSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config)
{
  cmock_call_instance->Expected_ui32Config = ui32Config;
}

void SysCtlClockSet_CMockIgnore(void)
{
  Mock.SysCtlClockSet_IgnoreBool = (char)1;
}

void SysCtlClockSet_CMockStopIgnore(void)
{
  Mock.SysCtlClockSet_IgnoreBool = (char)0;
}

void SysCtlClockSet_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Config)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlClockSet_CALL_INSTANCE));
  CMOCK_SysCtlClockSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlClockSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlClockSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlClockSet_CallInstance, cmock_guts_index);
  Mock.SysCtlClockSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlClockSet(cmock_call_instance, ui32Config);
}

void SysCtlClockSet_AddCallback(CMOCK_SysCtlClockSet_CALLBACK Callback)
{
  Mock.SysCtlClockSet_IgnoreBool = (char)0;
  Mock.SysCtlClockSet_CallbackBool = (char)1;
  Mock.SysCtlClockSet_CallbackFunctionPointer = Callback;
}

void SysCtlClockSet_Stub(CMOCK_SysCtlClockSet_CALLBACK Callback)
{
  Mock.SysCtlClockSet_IgnoreBool = (char)0;
  Mock.SysCtlClockSet_CallbackBool = (char)0;
  Mock.SysCtlClockSet_CallbackFunctionPointer = Callback;
}

uint32_t SysCtlClockGet(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlClockGet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlClockGet);
  cmock_call_instance = (CMOCK_SysCtlClockGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlClockGet_CallInstance);
  Mock.SysCtlClockGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlClockGet_CallInstance);
  if (Mock.SysCtlClockGet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlClockGet_FinalReturn;
    Mock.SysCtlClockGet_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlClockGet_CallbackBool &&
      Mock.SysCtlClockGet_CallbackFunctionPointer != NULL)
  {
    uint32_t cmock_cb_ret = Mock.SysCtlClockGet_CallbackFunctionPointer(Mock.SysCtlClockGet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlClockGet_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlClockGet_CallbackFunctionPointer(Mock.SysCtlClockGet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void SysCtlClockGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlClockGet_CALL_INSTANCE));
  CMOCK_SysCtlClockGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlClockGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlClockGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlClockGet_CallInstance, cmock_guts_index);
  Mock.SysCtlClockGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlClockGet_IgnoreBool = (char)1;
}

void SysCtlClockGet_CMockStopIgnore(void)
{
  if(Mock.SysCtlClockGet_IgnoreBool)
    Mock.SysCtlClockGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlClockGet_CallInstance);
  Mock.SysCtlClockGet_IgnoreBool = (char)0;
}

void SysCtlClockGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlClockGet_CALL_INSTANCE));
  CMOCK_SysCtlClockGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlClockGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlClockGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlClockGet_CallInstance, cmock_guts_index);
  Mock.SysCtlClockGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlClockGet_AddCallback(CMOCK_SysCtlClockGet_CALLBACK Callback)
{
  Mock.SysCtlClockGet_IgnoreBool = (char)0;
  Mock.SysCtlClockGet_CallbackBool = (char)1;
  Mock.SysCtlClockGet_CallbackFunctionPointer = Callback;
}

void SysCtlClockGet_Stub(CMOCK_SysCtlClockGet_CALLBACK Callback)
{
  Mock.SysCtlClockGet_IgnoreBool = (char)0;
  Mock.SysCtlClockGet_CallbackBool = (char)0;
  Mock.SysCtlClockGet_CallbackFunctionPointer = Callback;
}

void SysCtlDeepSleepClockSet(uint32_t ui32Config)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlDeepSleepClockSet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlDeepSleepClockSet);
  cmock_call_instance = (CMOCK_SysCtlDeepSleepClockSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlDeepSleepClockSet_CallInstance);
  Mock.SysCtlDeepSleepClockSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlDeepSleepClockSet_CallInstance);
  if (Mock.SysCtlDeepSleepClockSet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlDeepSleepClockSet_CallbackBool &&
      Mock.SysCtlDeepSleepClockSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlDeepSleepClockSet_CallbackFunctionPointer(ui32Config, Mock.SysCtlDeepSleepClockSet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlDeepSleepClockSet,CMockString_ui32Config);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Config, ui32Config, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlDeepSleepClockSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlDeepSleepClockSet_CallbackFunctionPointer(ui32Config, Mock.SysCtlDeepSleepClockSet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlDeepSleepClockSet(CMOCK_SysCtlDeepSleepClockSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config);
void CMockExpectParameters_SysCtlDeepSleepClockSet(CMOCK_SysCtlDeepSleepClockSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config)
{
  cmock_call_instance->Expected_ui32Config = ui32Config;
}

void SysCtlDeepSleepClockSet_CMockIgnore(void)
{
  Mock.SysCtlDeepSleepClockSet_IgnoreBool = (char)1;
}

void SysCtlDeepSleepClockSet_CMockStopIgnore(void)
{
  Mock.SysCtlDeepSleepClockSet_IgnoreBool = (char)0;
}

void SysCtlDeepSleepClockSet_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Config)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlDeepSleepClockSet_CALL_INSTANCE));
  CMOCK_SysCtlDeepSleepClockSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlDeepSleepClockSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlDeepSleepClockSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlDeepSleepClockSet_CallInstance, cmock_guts_index);
  Mock.SysCtlDeepSleepClockSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlDeepSleepClockSet(cmock_call_instance, ui32Config);
}

void SysCtlDeepSleepClockSet_AddCallback(CMOCK_SysCtlDeepSleepClockSet_CALLBACK Callback)
{
  Mock.SysCtlDeepSleepClockSet_IgnoreBool = (char)0;
  Mock.SysCtlDeepSleepClockSet_CallbackBool = (char)1;
  Mock.SysCtlDeepSleepClockSet_CallbackFunctionPointer = Callback;
}

void SysCtlDeepSleepClockSet_Stub(CMOCK_SysCtlDeepSleepClockSet_CALLBACK Callback)
{
  Mock.SysCtlDeepSleepClockSet_IgnoreBool = (char)0;
  Mock.SysCtlDeepSleepClockSet_CallbackBool = (char)0;
  Mock.SysCtlDeepSleepClockSet_CallbackFunctionPointer = Callback;
}

void SysCtlDeepSleepClockConfigSet(uint32_t ui32Div, uint32_t ui32Config)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlDeepSleepClockConfigSet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlDeepSleepClockConfigSet);
  cmock_call_instance = (CMOCK_SysCtlDeepSleepClockConfigSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlDeepSleepClockConfigSet_CallInstance);
  Mock.SysCtlDeepSleepClockConfigSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlDeepSleepClockConfigSet_CallInstance);
  if (Mock.SysCtlDeepSleepClockConfigSet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlDeepSleepClockConfigSet_CallbackBool &&
      Mock.SysCtlDeepSleepClockConfigSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlDeepSleepClockConfigSet_CallbackFunctionPointer(ui32Div, ui32Config, Mock.SysCtlDeepSleepClockConfigSet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlDeepSleepClockConfigSet,CMockString_ui32Div);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Div, ui32Div, cmock_line, CMockStringMismatch);
  }
  {
    UNITY_SET_DETAILS(CMockString_SysCtlDeepSleepClockConfigSet,CMockString_ui32Config);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Config, ui32Config, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlDeepSleepClockConfigSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlDeepSleepClockConfigSet_CallbackFunctionPointer(ui32Div, ui32Config, Mock.SysCtlDeepSleepClockConfigSet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlDeepSleepClockConfigSet(CMOCK_SysCtlDeepSleepClockConfigSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Div, uint32_t ui32Config);
void CMockExpectParameters_SysCtlDeepSleepClockConfigSet(CMOCK_SysCtlDeepSleepClockConfigSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Div, uint32_t ui32Config)
{
  cmock_call_instance->Expected_ui32Div = ui32Div;
  cmock_call_instance->Expected_ui32Config = ui32Config;
}

void SysCtlDeepSleepClockConfigSet_CMockIgnore(void)
{
  Mock.SysCtlDeepSleepClockConfigSet_IgnoreBool = (char)1;
}

void SysCtlDeepSleepClockConfigSet_CMockStopIgnore(void)
{
  Mock.SysCtlDeepSleepClockConfigSet_IgnoreBool = (char)0;
}

void SysCtlDeepSleepClockConfigSet_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Div, uint32_t ui32Config)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlDeepSleepClockConfigSet_CALL_INSTANCE));
  CMOCK_SysCtlDeepSleepClockConfigSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlDeepSleepClockConfigSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlDeepSleepClockConfigSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlDeepSleepClockConfigSet_CallInstance, cmock_guts_index);
  Mock.SysCtlDeepSleepClockConfigSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlDeepSleepClockConfigSet(cmock_call_instance, ui32Div, ui32Config);
}

void SysCtlDeepSleepClockConfigSet_AddCallback(CMOCK_SysCtlDeepSleepClockConfigSet_CALLBACK Callback)
{
  Mock.SysCtlDeepSleepClockConfigSet_IgnoreBool = (char)0;
  Mock.SysCtlDeepSleepClockConfigSet_CallbackBool = (char)1;
  Mock.SysCtlDeepSleepClockConfigSet_CallbackFunctionPointer = Callback;
}

void SysCtlDeepSleepClockConfigSet_Stub(CMOCK_SysCtlDeepSleepClockConfigSet_CALLBACK Callback)
{
  Mock.SysCtlDeepSleepClockConfigSet_IgnoreBool = (char)0;
  Mock.SysCtlDeepSleepClockConfigSet_CallbackBool = (char)0;
  Mock.SysCtlDeepSleepClockConfigSet_CallbackFunctionPointer = Callback;
}

void SysCtlPWMClockSet(uint32_t ui32Config)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPWMClockSet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPWMClockSet);
  cmock_call_instance = (CMOCK_SysCtlPWMClockSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPWMClockSet_CallInstance);
  Mock.SysCtlPWMClockSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPWMClockSet_CallInstance);
  if (Mock.SysCtlPWMClockSet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlPWMClockSet_CallbackBool &&
      Mock.SysCtlPWMClockSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPWMClockSet_CallbackFunctionPointer(ui32Config, Mock.SysCtlPWMClockSet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlPWMClockSet,CMockString_ui32Config);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Config, ui32Config, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlPWMClockSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPWMClockSet_CallbackFunctionPointer(ui32Config, Mock.SysCtlPWMClockSet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlPWMClockSet(CMOCK_SysCtlPWMClockSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config);
void CMockExpectParameters_SysCtlPWMClockSet(CMOCK_SysCtlPWMClockSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config)
{
  cmock_call_instance->Expected_ui32Config = ui32Config;
}

void SysCtlPWMClockSet_CMockIgnore(void)
{
  Mock.SysCtlPWMClockSet_IgnoreBool = (char)1;
}

void SysCtlPWMClockSet_CMockStopIgnore(void)
{
  Mock.SysCtlPWMClockSet_IgnoreBool = (char)0;
}

void SysCtlPWMClockSet_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Config)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPWMClockSet_CALL_INSTANCE));
  CMOCK_SysCtlPWMClockSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPWMClockSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPWMClockSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPWMClockSet_CallInstance, cmock_guts_index);
  Mock.SysCtlPWMClockSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlPWMClockSet(cmock_call_instance, ui32Config);
}

void SysCtlPWMClockSet_AddCallback(CMOCK_SysCtlPWMClockSet_CALLBACK Callback)
{
  Mock.SysCtlPWMClockSet_IgnoreBool = (char)0;
  Mock.SysCtlPWMClockSet_CallbackBool = (char)1;
  Mock.SysCtlPWMClockSet_CallbackFunctionPointer = Callback;
}

void SysCtlPWMClockSet_Stub(CMOCK_SysCtlPWMClockSet_CALLBACK Callback)
{
  Mock.SysCtlPWMClockSet_IgnoreBool = (char)0;
  Mock.SysCtlPWMClockSet_CallbackBool = (char)0;
  Mock.SysCtlPWMClockSet_CallbackFunctionPointer = Callback;
}

uint32_t SysCtlPWMClockGet(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPWMClockGet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPWMClockGet);
  cmock_call_instance = (CMOCK_SysCtlPWMClockGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPWMClockGet_CallInstance);
  Mock.SysCtlPWMClockGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPWMClockGet_CallInstance);
  if (Mock.SysCtlPWMClockGet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlPWMClockGet_FinalReturn;
    Mock.SysCtlPWMClockGet_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlPWMClockGet_CallbackBool &&
      Mock.SysCtlPWMClockGet_CallbackFunctionPointer != NULL)
  {
    uint32_t cmock_cb_ret = Mock.SysCtlPWMClockGet_CallbackFunctionPointer(Mock.SysCtlPWMClockGet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlPWMClockGet_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlPWMClockGet_CallbackFunctionPointer(Mock.SysCtlPWMClockGet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void SysCtlPWMClockGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPWMClockGet_CALL_INSTANCE));
  CMOCK_SysCtlPWMClockGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPWMClockGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPWMClockGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPWMClockGet_CallInstance, cmock_guts_index);
  Mock.SysCtlPWMClockGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlPWMClockGet_IgnoreBool = (char)1;
}

void SysCtlPWMClockGet_CMockStopIgnore(void)
{
  if(Mock.SysCtlPWMClockGet_IgnoreBool)
    Mock.SysCtlPWMClockGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPWMClockGet_CallInstance);
  Mock.SysCtlPWMClockGet_IgnoreBool = (char)0;
}

void SysCtlPWMClockGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPWMClockGet_CALL_INSTANCE));
  CMOCK_SysCtlPWMClockGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPWMClockGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPWMClockGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPWMClockGet_CallInstance, cmock_guts_index);
  Mock.SysCtlPWMClockGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlPWMClockGet_AddCallback(CMOCK_SysCtlPWMClockGet_CALLBACK Callback)
{
  Mock.SysCtlPWMClockGet_IgnoreBool = (char)0;
  Mock.SysCtlPWMClockGet_CallbackBool = (char)1;
  Mock.SysCtlPWMClockGet_CallbackFunctionPointer = Callback;
}

void SysCtlPWMClockGet_Stub(CMOCK_SysCtlPWMClockGet_CALLBACK Callback)
{
  Mock.SysCtlPWMClockGet_IgnoreBool = (char)0;
  Mock.SysCtlPWMClockGet_CallbackBool = (char)0;
  Mock.SysCtlPWMClockGet_CallbackFunctionPointer = Callback;
}

void SysCtlIOSCVerificationSet(bool bEnable)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlIOSCVerificationSet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlIOSCVerificationSet);
  cmock_call_instance = (CMOCK_SysCtlIOSCVerificationSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlIOSCVerificationSet_CallInstance);
  Mock.SysCtlIOSCVerificationSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlIOSCVerificationSet_CallInstance);
  if (Mock.SysCtlIOSCVerificationSet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlIOSCVerificationSet_CallbackBool &&
      Mock.SysCtlIOSCVerificationSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlIOSCVerificationSet_CallbackFunctionPointer(bEnable, Mock.SysCtlIOSCVerificationSet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlIOSCVerificationSet,CMockString_bEnable);
    UNITY_TEST_ASSERT_EQUAL_UINT8(cmock_call_instance->Expected_bEnable, bEnable, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlIOSCVerificationSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlIOSCVerificationSet_CallbackFunctionPointer(bEnable, Mock.SysCtlIOSCVerificationSet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlIOSCVerificationSet(CMOCK_SysCtlIOSCVerificationSet_CALL_INSTANCE* cmock_call_instance, bool bEnable);
void CMockExpectParameters_SysCtlIOSCVerificationSet(CMOCK_SysCtlIOSCVerificationSet_CALL_INSTANCE* cmock_call_instance, bool bEnable)
{
  cmock_call_instance->Expected_bEnable = bEnable;
}

void SysCtlIOSCVerificationSet_CMockIgnore(void)
{
  Mock.SysCtlIOSCVerificationSet_IgnoreBool = (char)1;
}

void SysCtlIOSCVerificationSet_CMockStopIgnore(void)
{
  Mock.SysCtlIOSCVerificationSet_IgnoreBool = (char)0;
}

void SysCtlIOSCVerificationSet_CMockExpect(UNITY_LINE_TYPE cmock_line, bool bEnable)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlIOSCVerificationSet_CALL_INSTANCE));
  CMOCK_SysCtlIOSCVerificationSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlIOSCVerificationSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlIOSCVerificationSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlIOSCVerificationSet_CallInstance, cmock_guts_index);
  Mock.SysCtlIOSCVerificationSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlIOSCVerificationSet(cmock_call_instance, bEnable);
}

void SysCtlIOSCVerificationSet_AddCallback(CMOCK_SysCtlIOSCVerificationSet_CALLBACK Callback)
{
  Mock.SysCtlIOSCVerificationSet_IgnoreBool = (char)0;
  Mock.SysCtlIOSCVerificationSet_CallbackBool = (char)1;
  Mock.SysCtlIOSCVerificationSet_CallbackFunctionPointer = Callback;
}

void SysCtlIOSCVerificationSet_Stub(CMOCK_SysCtlIOSCVerificationSet_CALLBACK Callback)
{
  Mock.SysCtlIOSCVerificationSet_IgnoreBool = (char)0;
  Mock.SysCtlIOSCVerificationSet_CallbackBool = (char)0;
  Mock.SysCtlIOSCVerificationSet_CallbackFunctionPointer = Callback;
}

void SysCtlMOSCVerificationSet(bool bEnable)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlMOSCVerificationSet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlMOSCVerificationSet);
  cmock_call_instance = (CMOCK_SysCtlMOSCVerificationSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlMOSCVerificationSet_CallInstance);
  Mock.SysCtlMOSCVerificationSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlMOSCVerificationSet_CallInstance);
  if (Mock.SysCtlMOSCVerificationSet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlMOSCVerificationSet_CallbackBool &&
      Mock.SysCtlMOSCVerificationSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlMOSCVerificationSet_CallbackFunctionPointer(bEnable, Mock.SysCtlMOSCVerificationSet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlMOSCVerificationSet,CMockString_bEnable);
    UNITY_TEST_ASSERT_EQUAL_UINT8(cmock_call_instance->Expected_bEnable, bEnable, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlMOSCVerificationSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlMOSCVerificationSet_CallbackFunctionPointer(bEnable, Mock.SysCtlMOSCVerificationSet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlMOSCVerificationSet(CMOCK_SysCtlMOSCVerificationSet_CALL_INSTANCE* cmock_call_instance, bool bEnable);
void CMockExpectParameters_SysCtlMOSCVerificationSet(CMOCK_SysCtlMOSCVerificationSet_CALL_INSTANCE* cmock_call_instance, bool bEnable)
{
  cmock_call_instance->Expected_bEnable = bEnable;
}

void SysCtlMOSCVerificationSet_CMockIgnore(void)
{
  Mock.SysCtlMOSCVerificationSet_IgnoreBool = (char)1;
}

void SysCtlMOSCVerificationSet_CMockStopIgnore(void)
{
  Mock.SysCtlMOSCVerificationSet_IgnoreBool = (char)0;
}

void SysCtlMOSCVerificationSet_CMockExpect(UNITY_LINE_TYPE cmock_line, bool bEnable)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlMOSCVerificationSet_CALL_INSTANCE));
  CMOCK_SysCtlMOSCVerificationSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlMOSCVerificationSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlMOSCVerificationSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlMOSCVerificationSet_CallInstance, cmock_guts_index);
  Mock.SysCtlMOSCVerificationSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlMOSCVerificationSet(cmock_call_instance, bEnable);
}

void SysCtlMOSCVerificationSet_AddCallback(CMOCK_SysCtlMOSCVerificationSet_CALLBACK Callback)
{
  Mock.SysCtlMOSCVerificationSet_IgnoreBool = (char)0;
  Mock.SysCtlMOSCVerificationSet_CallbackBool = (char)1;
  Mock.SysCtlMOSCVerificationSet_CallbackFunctionPointer = Callback;
}

void SysCtlMOSCVerificationSet_Stub(CMOCK_SysCtlMOSCVerificationSet_CALLBACK Callback)
{
  Mock.SysCtlMOSCVerificationSet_IgnoreBool = (char)0;
  Mock.SysCtlMOSCVerificationSet_CallbackBool = (char)0;
  Mock.SysCtlMOSCVerificationSet_CallbackFunctionPointer = Callback;
}

void SysCtlPLLVerificationSet(bool bEnable)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlPLLVerificationSet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlPLLVerificationSet);
  cmock_call_instance = (CMOCK_SysCtlPLLVerificationSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlPLLVerificationSet_CallInstance);
  Mock.SysCtlPLLVerificationSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlPLLVerificationSet_CallInstance);
  if (Mock.SysCtlPLLVerificationSet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlPLLVerificationSet_CallbackBool &&
      Mock.SysCtlPLLVerificationSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPLLVerificationSet_CallbackFunctionPointer(bEnable, Mock.SysCtlPLLVerificationSet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlPLLVerificationSet,CMockString_bEnable);
    UNITY_TEST_ASSERT_EQUAL_UINT8(cmock_call_instance->Expected_bEnable, bEnable, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlPLLVerificationSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlPLLVerificationSet_CallbackFunctionPointer(bEnable, Mock.SysCtlPLLVerificationSet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlPLLVerificationSet(CMOCK_SysCtlPLLVerificationSet_CALL_INSTANCE* cmock_call_instance, bool bEnable);
void CMockExpectParameters_SysCtlPLLVerificationSet(CMOCK_SysCtlPLLVerificationSet_CALL_INSTANCE* cmock_call_instance, bool bEnable)
{
  cmock_call_instance->Expected_bEnable = bEnable;
}

void SysCtlPLLVerificationSet_CMockIgnore(void)
{
  Mock.SysCtlPLLVerificationSet_IgnoreBool = (char)1;
}

void SysCtlPLLVerificationSet_CMockStopIgnore(void)
{
  Mock.SysCtlPLLVerificationSet_IgnoreBool = (char)0;
}

void SysCtlPLLVerificationSet_CMockExpect(UNITY_LINE_TYPE cmock_line, bool bEnable)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlPLLVerificationSet_CALL_INSTANCE));
  CMOCK_SysCtlPLLVerificationSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlPLLVerificationSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlPLLVerificationSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlPLLVerificationSet_CallInstance, cmock_guts_index);
  Mock.SysCtlPLLVerificationSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlPLLVerificationSet(cmock_call_instance, bEnable);
}

void SysCtlPLLVerificationSet_AddCallback(CMOCK_SysCtlPLLVerificationSet_CALLBACK Callback)
{
  Mock.SysCtlPLLVerificationSet_IgnoreBool = (char)0;
  Mock.SysCtlPLLVerificationSet_CallbackBool = (char)1;
  Mock.SysCtlPLLVerificationSet_CallbackFunctionPointer = Callback;
}

void SysCtlPLLVerificationSet_Stub(CMOCK_SysCtlPLLVerificationSet_CALLBACK Callback)
{
  Mock.SysCtlPLLVerificationSet_IgnoreBool = (char)0;
  Mock.SysCtlPLLVerificationSet_CallbackBool = (char)0;
  Mock.SysCtlPLLVerificationSet_CallbackFunctionPointer = Callback;
}

void SysCtlClkVerificationClear(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlClkVerificationClear_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlClkVerificationClear);
  cmock_call_instance = (CMOCK_SysCtlClkVerificationClear_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlClkVerificationClear_CallInstance);
  Mock.SysCtlClkVerificationClear_CallInstance = CMock_Guts_MemNext(Mock.SysCtlClkVerificationClear_CallInstance);
  if (Mock.SysCtlClkVerificationClear_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlClkVerificationClear_CallbackBool &&
      Mock.SysCtlClkVerificationClear_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlClkVerificationClear_CallbackFunctionPointer(Mock.SysCtlClkVerificationClear_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlClkVerificationClear_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlClkVerificationClear_CallbackFunctionPointer(Mock.SysCtlClkVerificationClear_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void SysCtlClkVerificationClear_CMockIgnore(void)
{
  Mock.SysCtlClkVerificationClear_IgnoreBool = (char)1;
}

void SysCtlClkVerificationClear_CMockStopIgnore(void)
{
  Mock.SysCtlClkVerificationClear_IgnoreBool = (char)0;
}

void SysCtlClkVerificationClear_CMockExpect(UNITY_LINE_TYPE cmock_line)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlClkVerificationClear_CALL_INSTANCE));
  CMOCK_SysCtlClkVerificationClear_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlClkVerificationClear_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlClkVerificationClear_CallInstance = CMock_Guts_MemChain(Mock.SysCtlClkVerificationClear_CallInstance, cmock_guts_index);
  Mock.SysCtlClkVerificationClear_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
}

void SysCtlClkVerificationClear_AddCallback(CMOCK_SysCtlClkVerificationClear_CALLBACK Callback)
{
  Mock.SysCtlClkVerificationClear_IgnoreBool = (char)0;
  Mock.SysCtlClkVerificationClear_CallbackBool = (char)1;
  Mock.SysCtlClkVerificationClear_CallbackFunctionPointer = Callback;
}

void SysCtlClkVerificationClear_Stub(CMOCK_SysCtlClkVerificationClear_CALLBACK Callback)
{
  Mock.SysCtlClkVerificationClear_IgnoreBool = (char)0;
  Mock.SysCtlClkVerificationClear_CallbackBool = (char)0;
  Mock.SysCtlClkVerificationClear_CallbackFunctionPointer = Callback;
}

void SysCtlGPIOAHBEnable(uint32_t ui32GPIOPeripheral)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlGPIOAHBEnable_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlGPIOAHBEnable);
  cmock_call_instance = (CMOCK_SysCtlGPIOAHBEnable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlGPIOAHBEnable_CallInstance);
  Mock.SysCtlGPIOAHBEnable_CallInstance = CMock_Guts_MemNext(Mock.SysCtlGPIOAHBEnable_CallInstance);
  if (Mock.SysCtlGPIOAHBEnable_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlGPIOAHBEnable_CallbackBool &&
      Mock.SysCtlGPIOAHBEnable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlGPIOAHBEnable_CallbackFunctionPointer(ui32GPIOPeripheral, Mock.SysCtlGPIOAHBEnable_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlGPIOAHBEnable,CMockString_ui32GPIOPeripheral);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32GPIOPeripheral, ui32GPIOPeripheral, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlGPIOAHBEnable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlGPIOAHBEnable_CallbackFunctionPointer(ui32GPIOPeripheral, Mock.SysCtlGPIOAHBEnable_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlGPIOAHBEnable(CMOCK_SysCtlGPIOAHBEnable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32GPIOPeripheral);
void CMockExpectParameters_SysCtlGPIOAHBEnable(CMOCK_SysCtlGPIOAHBEnable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32GPIOPeripheral)
{
  cmock_call_instance->Expected_ui32GPIOPeripheral = ui32GPIOPeripheral;
}

void SysCtlGPIOAHBEnable_CMockIgnore(void)
{
  Mock.SysCtlGPIOAHBEnable_IgnoreBool = (char)1;
}

void SysCtlGPIOAHBEnable_CMockStopIgnore(void)
{
  Mock.SysCtlGPIOAHBEnable_IgnoreBool = (char)0;
}

void SysCtlGPIOAHBEnable_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32GPIOPeripheral)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlGPIOAHBEnable_CALL_INSTANCE));
  CMOCK_SysCtlGPIOAHBEnable_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlGPIOAHBEnable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlGPIOAHBEnable_CallInstance = CMock_Guts_MemChain(Mock.SysCtlGPIOAHBEnable_CallInstance, cmock_guts_index);
  Mock.SysCtlGPIOAHBEnable_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlGPIOAHBEnable(cmock_call_instance, ui32GPIOPeripheral);
}

void SysCtlGPIOAHBEnable_AddCallback(CMOCK_SysCtlGPIOAHBEnable_CALLBACK Callback)
{
  Mock.SysCtlGPIOAHBEnable_IgnoreBool = (char)0;
  Mock.SysCtlGPIOAHBEnable_CallbackBool = (char)1;
  Mock.SysCtlGPIOAHBEnable_CallbackFunctionPointer = Callback;
}

void SysCtlGPIOAHBEnable_Stub(CMOCK_SysCtlGPIOAHBEnable_CALLBACK Callback)
{
  Mock.SysCtlGPIOAHBEnable_IgnoreBool = (char)0;
  Mock.SysCtlGPIOAHBEnable_CallbackBool = (char)0;
  Mock.SysCtlGPIOAHBEnable_CallbackFunctionPointer = Callback;
}

void SysCtlGPIOAHBDisable(uint32_t ui32GPIOPeripheral)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlGPIOAHBDisable_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlGPIOAHBDisable);
  cmock_call_instance = (CMOCK_SysCtlGPIOAHBDisable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlGPIOAHBDisable_CallInstance);
  Mock.SysCtlGPIOAHBDisable_CallInstance = CMock_Guts_MemNext(Mock.SysCtlGPIOAHBDisable_CallInstance);
  if (Mock.SysCtlGPIOAHBDisable_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlGPIOAHBDisable_CallbackBool &&
      Mock.SysCtlGPIOAHBDisable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlGPIOAHBDisable_CallbackFunctionPointer(ui32GPIOPeripheral, Mock.SysCtlGPIOAHBDisable_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlGPIOAHBDisable,CMockString_ui32GPIOPeripheral);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32GPIOPeripheral, ui32GPIOPeripheral, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlGPIOAHBDisable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlGPIOAHBDisable_CallbackFunctionPointer(ui32GPIOPeripheral, Mock.SysCtlGPIOAHBDisable_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlGPIOAHBDisable(CMOCK_SysCtlGPIOAHBDisable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32GPIOPeripheral);
void CMockExpectParameters_SysCtlGPIOAHBDisable(CMOCK_SysCtlGPIOAHBDisable_CALL_INSTANCE* cmock_call_instance, uint32_t ui32GPIOPeripheral)
{
  cmock_call_instance->Expected_ui32GPIOPeripheral = ui32GPIOPeripheral;
}

void SysCtlGPIOAHBDisable_CMockIgnore(void)
{
  Mock.SysCtlGPIOAHBDisable_IgnoreBool = (char)1;
}

void SysCtlGPIOAHBDisable_CMockStopIgnore(void)
{
  Mock.SysCtlGPIOAHBDisable_IgnoreBool = (char)0;
}

void SysCtlGPIOAHBDisable_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32GPIOPeripheral)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlGPIOAHBDisable_CALL_INSTANCE));
  CMOCK_SysCtlGPIOAHBDisable_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlGPIOAHBDisable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlGPIOAHBDisable_CallInstance = CMock_Guts_MemChain(Mock.SysCtlGPIOAHBDisable_CallInstance, cmock_guts_index);
  Mock.SysCtlGPIOAHBDisable_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlGPIOAHBDisable(cmock_call_instance, ui32GPIOPeripheral);
}

void SysCtlGPIOAHBDisable_AddCallback(CMOCK_SysCtlGPIOAHBDisable_CALLBACK Callback)
{
  Mock.SysCtlGPIOAHBDisable_IgnoreBool = (char)0;
  Mock.SysCtlGPIOAHBDisable_CallbackBool = (char)1;
  Mock.SysCtlGPIOAHBDisable_CallbackFunctionPointer = Callback;
}

void SysCtlGPIOAHBDisable_Stub(CMOCK_SysCtlGPIOAHBDisable_CALLBACK Callback)
{
  Mock.SysCtlGPIOAHBDisable_IgnoreBool = (char)0;
  Mock.SysCtlGPIOAHBDisable_CallbackBool = (char)0;
  Mock.SysCtlGPIOAHBDisable_CallbackFunctionPointer = Callback;
}

void SysCtlUSBPLLEnable(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlUSBPLLEnable_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlUSBPLLEnable);
  cmock_call_instance = (CMOCK_SysCtlUSBPLLEnable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlUSBPLLEnable_CallInstance);
  Mock.SysCtlUSBPLLEnable_CallInstance = CMock_Guts_MemNext(Mock.SysCtlUSBPLLEnable_CallInstance);
  if (Mock.SysCtlUSBPLLEnable_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlUSBPLLEnable_CallbackBool &&
      Mock.SysCtlUSBPLLEnable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlUSBPLLEnable_CallbackFunctionPointer(Mock.SysCtlUSBPLLEnable_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlUSBPLLEnable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlUSBPLLEnable_CallbackFunctionPointer(Mock.SysCtlUSBPLLEnable_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void SysCtlUSBPLLEnable_CMockIgnore(void)
{
  Mock.SysCtlUSBPLLEnable_IgnoreBool = (char)1;
}

void SysCtlUSBPLLEnable_CMockStopIgnore(void)
{
  Mock.SysCtlUSBPLLEnable_IgnoreBool = (char)0;
}

void SysCtlUSBPLLEnable_CMockExpect(UNITY_LINE_TYPE cmock_line)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlUSBPLLEnable_CALL_INSTANCE));
  CMOCK_SysCtlUSBPLLEnable_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlUSBPLLEnable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlUSBPLLEnable_CallInstance = CMock_Guts_MemChain(Mock.SysCtlUSBPLLEnable_CallInstance, cmock_guts_index);
  Mock.SysCtlUSBPLLEnable_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
}

void SysCtlUSBPLLEnable_AddCallback(CMOCK_SysCtlUSBPLLEnable_CALLBACK Callback)
{
  Mock.SysCtlUSBPLLEnable_IgnoreBool = (char)0;
  Mock.SysCtlUSBPLLEnable_CallbackBool = (char)1;
  Mock.SysCtlUSBPLLEnable_CallbackFunctionPointer = Callback;
}

void SysCtlUSBPLLEnable_Stub(CMOCK_SysCtlUSBPLLEnable_CALLBACK Callback)
{
  Mock.SysCtlUSBPLLEnable_IgnoreBool = (char)0;
  Mock.SysCtlUSBPLLEnable_CallbackBool = (char)0;
  Mock.SysCtlUSBPLLEnable_CallbackFunctionPointer = Callback;
}

void SysCtlUSBPLLDisable(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlUSBPLLDisable_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlUSBPLLDisable);
  cmock_call_instance = (CMOCK_SysCtlUSBPLLDisable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlUSBPLLDisable_CallInstance);
  Mock.SysCtlUSBPLLDisable_CallInstance = CMock_Guts_MemNext(Mock.SysCtlUSBPLLDisable_CallInstance);
  if (Mock.SysCtlUSBPLLDisable_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlUSBPLLDisable_CallbackBool &&
      Mock.SysCtlUSBPLLDisable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlUSBPLLDisable_CallbackFunctionPointer(Mock.SysCtlUSBPLLDisable_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlUSBPLLDisable_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlUSBPLLDisable_CallbackFunctionPointer(Mock.SysCtlUSBPLLDisable_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void SysCtlUSBPLLDisable_CMockIgnore(void)
{
  Mock.SysCtlUSBPLLDisable_IgnoreBool = (char)1;
}

void SysCtlUSBPLLDisable_CMockStopIgnore(void)
{
  Mock.SysCtlUSBPLLDisable_IgnoreBool = (char)0;
}

void SysCtlUSBPLLDisable_CMockExpect(UNITY_LINE_TYPE cmock_line)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlUSBPLLDisable_CALL_INSTANCE));
  CMOCK_SysCtlUSBPLLDisable_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlUSBPLLDisable_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlUSBPLLDisable_CallInstance = CMock_Guts_MemChain(Mock.SysCtlUSBPLLDisable_CallInstance, cmock_guts_index);
  Mock.SysCtlUSBPLLDisable_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
}

void SysCtlUSBPLLDisable_AddCallback(CMOCK_SysCtlUSBPLLDisable_CALLBACK Callback)
{
  Mock.SysCtlUSBPLLDisable_IgnoreBool = (char)0;
  Mock.SysCtlUSBPLLDisable_CallbackBool = (char)1;
  Mock.SysCtlUSBPLLDisable_CallbackFunctionPointer = Callback;
}

void SysCtlUSBPLLDisable_Stub(CMOCK_SysCtlUSBPLLDisable_CALLBACK Callback)
{
  Mock.SysCtlUSBPLLDisable_IgnoreBool = (char)0;
  Mock.SysCtlUSBPLLDisable_CallbackBool = (char)0;
  Mock.SysCtlUSBPLLDisable_CallbackFunctionPointer = Callback;
}

uint32_t SysCtlClockFreqSet(uint32_t ui32Config, uint32_t ui32SysClock)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlClockFreqSet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlClockFreqSet);
  cmock_call_instance = (CMOCK_SysCtlClockFreqSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlClockFreqSet_CallInstance);
  Mock.SysCtlClockFreqSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlClockFreqSet_CallInstance);
  if (Mock.SysCtlClockFreqSet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlClockFreqSet_FinalReturn;
    Mock.SysCtlClockFreqSet_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlClockFreqSet_CallbackBool &&
      Mock.SysCtlClockFreqSet_CallbackFunctionPointer != NULL)
  {
    uint32_t cmock_cb_ret = Mock.SysCtlClockFreqSet_CallbackFunctionPointer(ui32Config, ui32SysClock, Mock.SysCtlClockFreqSet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlClockFreqSet,CMockString_ui32Config);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Config, ui32Config, cmock_line, CMockStringMismatch);
  }
  {
    UNITY_SET_DETAILS(CMockString_SysCtlClockFreqSet,CMockString_ui32SysClock);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32SysClock, ui32SysClock, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlClockFreqSet_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlClockFreqSet_CallbackFunctionPointer(ui32Config, ui32SysClock, Mock.SysCtlClockFreqSet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void CMockExpectParameters_SysCtlClockFreqSet(CMOCK_SysCtlClockFreqSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config, uint32_t ui32SysClock);
void CMockExpectParameters_SysCtlClockFreqSet(CMOCK_SysCtlClockFreqSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config, uint32_t ui32SysClock)
{
  cmock_call_instance->Expected_ui32Config = ui32Config;
  cmock_call_instance->Expected_ui32SysClock = ui32SysClock;
}

void SysCtlClockFreqSet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlClockFreqSet_CALL_INSTANCE));
  CMOCK_SysCtlClockFreqSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlClockFreqSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlClockFreqSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlClockFreqSet_CallInstance, cmock_guts_index);
  Mock.SysCtlClockFreqSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlClockFreqSet_IgnoreBool = (char)1;
}

void SysCtlClockFreqSet_CMockStopIgnore(void)
{
  if(Mock.SysCtlClockFreqSet_IgnoreBool)
    Mock.SysCtlClockFreqSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlClockFreqSet_CallInstance);
  Mock.SysCtlClockFreqSet_IgnoreBool = (char)0;
}

void SysCtlClockFreqSet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ui32Config, uint32_t ui32SysClock, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlClockFreqSet_CALL_INSTANCE));
  CMOCK_SysCtlClockFreqSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlClockFreqSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlClockFreqSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlClockFreqSet_CallInstance, cmock_guts_index);
  Mock.SysCtlClockFreqSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlClockFreqSet(cmock_call_instance, ui32Config, ui32SysClock);
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlClockFreqSet_AddCallback(CMOCK_SysCtlClockFreqSet_CALLBACK Callback)
{
  Mock.SysCtlClockFreqSet_IgnoreBool = (char)0;
  Mock.SysCtlClockFreqSet_CallbackBool = (char)1;
  Mock.SysCtlClockFreqSet_CallbackFunctionPointer = Callback;
}

void SysCtlClockFreqSet_Stub(CMOCK_SysCtlClockFreqSet_CALLBACK Callback)
{
  Mock.SysCtlClockFreqSet_IgnoreBool = (char)0;
  Mock.SysCtlClockFreqSet_CallbackBool = (char)0;
  Mock.SysCtlClockFreqSet_CallbackFunctionPointer = Callback;
}

void SysCtlResetBehaviorSet(uint32_t ui32Behavior)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlResetBehaviorSet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlResetBehaviorSet);
  cmock_call_instance = (CMOCK_SysCtlResetBehaviorSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlResetBehaviorSet_CallInstance);
  Mock.SysCtlResetBehaviorSet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlResetBehaviorSet_CallInstance);
  if (Mock.SysCtlResetBehaviorSet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlResetBehaviorSet_CallbackBool &&
      Mock.SysCtlResetBehaviorSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlResetBehaviorSet_CallbackFunctionPointer(ui32Behavior, Mock.SysCtlResetBehaviorSet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlResetBehaviorSet,CMockString_ui32Behavior);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Behavior, ui32Behavior, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlResetBehaviorSet_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlResetBehaviorSet_CallbackFunctionPointer(ui32Behavior, Mock.SysCtlResetBehaviorSet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlResetBehaviorSet(CMOCK_SysCtlResetBehaviorSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Behavior);
void CMockExpectParameters_SysCtlResetBehaviorSet(CMOCK_SysCtlResetBehaviorSet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Behavior)
{
  cmock_call_instance->Expected_ui32Behavior = ui32Behavior;
}

void SysCtlResetBehaviorSet_CMockIgnore(void)
{
  Mock.SysCtlResetBehaviorSet_IgnoreBool = (char)1;
}

void SysCtlResetBehaviorSet_CMockStopIgnore(void)
{
  Mock.SysCtlResetBehaviorSet_IgnoreBool = (char)0;
}

void SysCtlResetBehaviorSet_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Behavior)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlResetBehaviorSet_CALL_INSTANCE));
  CMOCK_SysCtlResetBehaviorSet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlResetBehaviorSet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlResetBehaviorSet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlResetBehaviorSet_CallInstance, cmock_guts_index);
  Mock.SysCtlResetBehaviorSet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlResetBehaviorSet(cmock_call_instance, ui32Behavior);
}

void SysCtlResetBehaviorSet_AddCallback(CMOCK_SysCtlResetBehaviorSet_CALLBACK Callback)
{
  Mock.SysCtlResetBehaviorSet_IgnoreBool = (char)0;
  Mock.SysCtlResetBehaviorSet_CallbackBool = (char)1;
  Mock.SysCtlResetBehaviorSet_CallbackFunctionPointer = Callback;
}

void SysCtlResetBehaviorSet_Stub(CMOCK_SysCtlResetBehaviorSet_CALLBACK Callback)
{
  Mock.SysCtlResetBehaviorSet_IgnoreBool = (char)0;
  Mock.SysCtlResetBehaviorSet_CallbackBool = (char)0;
  Mock.SysCtlResetBehaviorSet_CallbackFunctionPointer = Callback;
}

uint32_t SysCtlResetBehaviorGet(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlResetBehaviorGet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlResetBehaviorGet);
  cmock_call_instance = (CMOCK_SysCtlResetBehaviorGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlResetBehaviorGet_CallInstance);
  Mock.SysCtlResetBehaviorGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlResetBehaviorGet_CallInstance);
  if (Mock.SysCtlResetBehaviorGet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlResetBehaviorGet_FinalReturn;
    Mock.SysCtlResetBehaviorGet_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlResetBehaviorGet_CallbackBool &&
      Mock.SysCtlResetBehaviorGet_CallbackFunctionPointer != NULL)
  {
    uint32_t cmock_cb_ret = Mock.SysCtlResetBehaviorGet_CallbackFunctionPointer(Mock.SysCtlResetBehaviorGet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlResetBehaviorGet_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlResetBehaviorGet_CallbackFunctionPointer(Mock.SysCtlResetBehaviorGet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void SysCtlResetBehaviorGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlResetBehaviorGet_CALL_INSTANCE));
  CMOCK_SysCtlResetBehaviorGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlResetBehaviorGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlResetBehaviorGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlResetBehaviorGet_CallInstance, cmock_guts_index);
  Mock.SysCtlResetBehaviorGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlResetBehaviorGet_IgnoreBool = (char)1;
}

void SysCtlResetBehaviorGet_CMockStopIgnore(void)
{
  if(Mock.SysCtlResetBehaviorGet_IgnoreBool)
    Mock.SysCtlResetBehaviorGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlResetBehaviorGet_CallInstance);
  Mock.SysCtlResetBehaviorGet_IgnoreBool = (char)0;
}

void SysCtlResetBehaviorGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlResetBehaviorGet_CALL_INSTANCE));
  CMOCK_SysCtlResetBehaviorGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlResetBehaviorGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlResetBehaviorGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlResetBehaviorGet_CallInstance, cmock_guts_index);
  Mock.SysCtlResetBehaviorGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlResetBehaviorGet_AddCallback(CMOCK_SysCtlResetBehaviorGet_CALLBACK Callback)
{
  Mock.SysCtlResetBehaviorGet_IgnoreBool = (char)0;
  Mock.SysCtlResetBehaviorGet_CallbackBool = (char)1;
  Mock.SysCtlResetBehaviorGet_CallbackFunctionPointer = Callback;
}

void SysCtlResetBehaviorGet_Stub(CMOCK_SysCtlResetBehaviorGet_CALLBACK Callback)
{
  Mock.SysCtlResetBehaviorGet_IgnoreBool = (char)0;
  Mock.SysCtlResetBehaviorGet_CallbackBool = (char)0;
  Mock.SysCtlResetBehaviorGet_CallbackFunctionPointer = Callback;
}

void SysCtlClockOutConfig(uint32_t ui32Config, uint32_t ui32Div)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlClockOutConfig_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlClockOutConfig);
  cmock_call_instance = (CMOCK_SysCtlClockOutConfig_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlClockOutConfig_CallInstance);
  Mock.SysCtlClockOutConfig_CallInstance = CMock_Guts_MemNext(Mock.SysCtlClockOutConfig_CallInstance);
  if (Mock.SysCtlClockOutConfig_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlClockOutConfig_CallbackBool &&
      Mock.SysCtlClockOutConfig_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlClockOutConfig_CallbackFunctionPointer(ui32Config, ui32Div, Mock.SysCtlClockOutConfig_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlClockOutConfig,CMockString_ui32Config);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Config, ui32Config, cmock_line, CMockStringMismatch);
  }
  {
    UNITY_SET_DETAILS(CMockString_SysCtlClockOutConfig,CMockString_ui32Div);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Div, ui32Div, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlClockOutConfig_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlClockOutConfig_CallbackFunctionPointer(ui32Config, ui32Div, Mock.SysCtlClockOutConfig_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlClockOutConfig(CMOCK_SysCtlClockOutConfig_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config, uint32_t ui32Div);
void CMockExpectParameters_SysCtlClockOutConfig(CMOCK_SysCtlClockOutConfig_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config, uint32_t ui32Div)
{
  cmock_call_instance->Expected_ui32Config = ui32Config;
  cmock_call_instance->Expected_ui32Div = ui32Div;
}

void SysCtlClockOutConfig_CMockIgnore(void)
{
  Mock.SysCtlClockOutConfig_IgnoreBool = (char)1;
}

void SysCtlClockOutConfig_CMockStopIgnore(void)
{
  Mock.SysCtlClockOutConfig_IgnoreBool = (char)0;
}

void SysCtlClockOutConfig_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Config, uint32_t ui32Div)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlClockOutConfig_CALL_INSTANCE));
  CMOCK_SysCtlClockOutConfig_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlClockOutConfig_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlClockOutConfig_CallInstance = CMock_Guts_MemChain(Mock.SysCtlClockOutConfig_CallInstance, cmock_guts_index);
  Mock.SysCtlClockOutConfig_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlClockOutConfig(cmock_call_instance, ui32Config, ui32Div);
}

void SysCtlClockOutConfig_AddCallback(CMOCK_SysCtlClockOutConfig_CALLBACK Callback)
{
  Mock.SysCtlClockOutConfig_IgnoreBool = (char)0;
  Mock.SysCtlClockOutConfig_CallbackBool = (char)1;
  Mock.SysCtlClockOutConfig_CallbackFunctionPointer = Callback;
}

void SysCtlClockOutConfig_Stub(CMOCK_SysCtlClockOutConfig_CALLBACK Callback)
{
  Mock.SysCtlClockOutConfig_IgnoreBool = (char)0;
  Mock.SysCtlClockOutConfig_CallbackBool = (char)0;
  Mock.SysCtlClockOutConfig_CallbackFunctionPointer = Callback;
}

void SysCtlAltClkConfig(uint32_t ui32Config)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlAltClkConfig_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlAltClkConfig);
  cmock_call_instance = (CMOCK_SysCtlAltClkConfig_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlAltClkConfig_CallInstance);
  Mock.SysCtlAltClkConfig_CallInstance = CMock_Guts_MemNext(Mock.SysCtlAltClkConfig_CallInstance);
  if (Mock.SysCtlAltClkConfig_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlAltClkConfig_CallbackBool &&
      Mock.SysCtlAltClkConfig_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlAltClkConfig_CallbackFunctionPointer(ui32Config, Mock.SysCtlAltClkConfig_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlAltClkConfig,CMockString_ui32Config);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Config, ui32Config, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlAltClkConfig_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlAltClkConfig_CallbackFunctionPointer(ui32Config, Mock.SysCtlAltClkConfig_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlAltClkConfig(CMOCK_SysCtlAltClkConfig_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config);
void CMockExpectParameters_SysCtlAltClkConfig(CMOCK_SysCtlAltClkConfig_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config)
{
  cmock_call_instance->Expected_ui32Config = ui32Config;
}

void SysCtlAltClkConfig_CMockIgnore(void)
{
  Mock.SysCtlAltClkConfig_IgnoreBool = (char)1;
}

void SysCtlAltClkConfig_CMockStopIgnore(void)
{
  Mock.SysCtlAltClkConfig_IgnoreBool = (char)0;
}

void SysCtlAltClkConfig_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Config)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlAltClkConfig_CALL_INSTANCE));
  CMOCK_SysCtlAltClkConfig_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlAltClkConfig_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlAltClkConfig_CallInstance = CMock_Guts_MemChain(Mock.SysCtlAltClkConfig_CallInstance, cmock_guts_index);
  Mock.SysCtlAltClkConfig_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlAltClkConfig(cmock_call_instance, ui32Config);
}

void SysCtlAltClkConfig_AddCallback(CMOCK_SysCtlAltClkConfig_CALLBACK Callback)
{
  Mock.SysCtlAltClkConfig_IgnoreBool = (char)0;
  Mock.SysCtlAltClkConfig_CallbackBool = (char)1;
  Mock.SysCtlAltClkConfig_CallbackFunctionPointer = Callback;
}

void SysCtlAltClkConfig_Stub(CMOCK_SysCtlAltClkConfig_CALLBACK Callback)
{
  Mock.SysCtlAltClkConfig_IgnoreBool = (char)0;
  Mock.SysCtlAltClkConfig_CallbackBool = (char)0;
  Mock.SysCtlAltClkConfig_CallbackFunctionPointer = Callback;
}

uint32_t SysCtlNMIStatus(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlNMIStatus_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlNMIStatus);
  cmock_call_instance = (CMOCK_SysCtlNMIStatus_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlNMIStatus_CallInstance);
  Mock.SysCtlNMIStatus_CallInstance = CMock_Guts_MemNext(Mock.SysCtlNMIStatus_CallInstance);
  if (Mock.SysCtlNMIStatus_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlNMIStatus_FinalReturn;
    Mock.SysCtlNMIStatus_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlNMIStatus_CallbackBool &&
      Mock.SysCtlNMIStatus_CallbackFunctionPointer != NULL)
  {
    uint32_t cmock_cb_ret = Mock.SysCtlNMIStatus_CallbackFunctionPointer(Mock.SysCtlNMIStatus_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlNMIStatus_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlNMIStatus_CallbackFunctionPointer(Mock.SysCtlNMIStatus_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void SysCtlNMIStatus_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlNMIStatus_CALL_INSTANCE));
  CMOCK_SysCtlNMIStatus_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlNMIStatus_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlNMIStatus_CallInstance = CMock_Guts_MemChain(Mock.SysCtlNMIStatus_CallInstance, cmock_guts_index);
  Mock.SysCtlNMIStatus_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlNMIStatus_IgnoreBool = (char)1;
}

void SysCtlNMIStatus_CMockStopIgnore(void)
{
  if(Mock.SysCtlNMIStatus_IgnoreBool)
    Mock.SysCtlNMIStatus_CallInstance = CMock_Guts_MemNext(Mock.SysCtlNMIStatus_CallInstance);
  Mock.SysCtlNMIStatus_IgnoreBool = (char)0;
}

void SysCtlNMIStatus_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlNMIStatus_CALL_INSTANCE));
  CMOCK_SysCtlNMIStatus_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlNMIStatus_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlNMIStatus_CallInstance = CMock_Guts_MemChain(Mock.SysCtlNMIStatus_CallInstance, cmock_guts_index);
  Mock.SysCtlNMIStatus_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlNMIStatus_AddCallback(CMOCK_SysCtlNMIStatus_CALLBACK Callback)
{
  Mock.SysCtlNMIStatus_IgnoreBool = (char)0;
  Mock.SysCtlNMIStatus_CallbackBool = (char)1;
  Mock.SysCtlNMIStatus_CallbackFunctionPointer = Callback;
}

void SysCtlNMIStatus_Stub(CMOCK_SysCtlNMIStatus_CALLBACK Callback)
{
  Mock.SysCtlNMIStatus_IgnoreBool = (char)0;
  Mock.SysCtlNMIStatus_CallbackBool = (char)0;
  Mock.SysCtlNMIStatus_CallbackFunctionPointer = Callback;
}

void SysCtlNMIClear(uint32_t ui32Status)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlNMIClear_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlNMIClear);
  cmock_call_instance = (CMOCK_SysCtlNMIClear_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlNMIClear_CallInstance);
  Mock.SysCtlNMIClear_CallInstance = CMock_Guts_MemNext(Mock.SysCtlNMIClear_CallInstance);
  if (Mock.SysCtlNMIClear_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlNMIClear_CallbackBool &&
      Mock.SysCtlNMIClear_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlNMIClear_CallbackFunctionPointer(ui32Status, Mock.SysCtlNMIClear_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlNMIClear,CMockString_ui32Status);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Status, ui32Status, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlNMIClear_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlNMIClear_CallbackFunctionPointer(ui32Status, Mock.SysCtlNMIClear_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlNMIClear(CMOCK_SysCtlNMIClear_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Status);
void CMockExpectParameters_SysCtlNMIClear(CMOCK_SysCtlNMIClear_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Status)
{
  cmock_call_instance->Expected_ui32Status = ui32Status;
}

void SysCtlNMIClear_CMockIgnore(void)
{
  Mock.SysCtlNMIClear_IgnoreBool = (char)1;
}

void SysCtlNMIClear_CMockStopIgnore(void)
{
  Mock.SysCtlNMIClear_IgnoreBool = (char)0;
}

void SysCtlNMIClear_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Status)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlNMIClear_CALL_INSTANCE));
  CMOCK_SysCtlNMIClear_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlNMIClear_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlNMIClear_CallInstance = CMock_Guts_MemChain(Mock.SysCtlNMIClear_CallInstance, cmock_guts_index);
  Mock.SysCtlNMIClear_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlNMIClear(cmock_call_instance, ui32Status);
}

void SysCtlNMIClear_AddCallback(CMOCK_SysCtlNMIClear_CALLBACK Callback)
{
  Mock.SysCtlNMIClear_IgnoreBool = (char)0;
  Mock.SysCtlNMIClear_CallbackBool = (char)1;
  Mock.SysCtlNMIClear_CallbackFunctionPointer = Callback;
}

void SysCtlNMIClear_Stub(CMOCK_SysCtlNMIClear_CALLBACK Callback)
{
  Mock.SysCtlNMIClear_IgnoreBool = (char)0;
  Mock.SysCtlNMIClear_CallbackBool = (char)0;
  Mock.SysCtlNMIClear_CallbackFunctionPointer = Callback;
}

void SysCtlVoltageEventConfig(uint32_t ui32Config)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlVoltageEventConfig_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlVoltageEventConfig);
  cmock_call_instance = (CMOCK_SysCtlVoltageEventConfig_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlVoltageEventConfig_CallInstance);
  Mock.SysCtlVoltageEventConfig_CallInstance = CMock_Guts_MemNext(Mock.SysCtlVoltageEventConfig_CallInstance);
  if (Mock.SysCtlVoltageEventConfig_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlVoltageEventConfig_CallbackBool &&
      Mock.SysCtlVoltageEventConfig_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlVoltageEventConfig_CallbackFunctionPointer(ui32Config, Mock.SysCtlVoltageEventConfig_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlVoltageEventConfig,CMockString_ui32Config);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Config, ui32Config, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlVoltageEventConfig_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlVoltageEventConfig_CallbackFunctionPointer(ui32Config, Mock.SysCtlVoltageEventConfig_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlVoltageEventConfig(CMOCK_SysCtlVoltageEventConfig_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config);
void CMockExpectParameters_SysCtlVoltageEventConfig(CMOCK_SysCtlVoltageEventConfig_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Config)
{
  cmock_call_instance->Expected_ui32Config = ui32Config;
}

void SysCtlVoltageEventConfig_CMockIgnore(void)
{
  Mock.SysCtlVoltageEventConfig_IgnoreBool = (char)1;
}

void SysCtlVoltageEventConfig_CMockStopIgnore(void)
{
  Mock.SysCtlVoltageEventConfig_IgnoreBool = (char)0;
}

void SysCtlVoltageEventConfig_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Config)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlVoltageEventConfig_CALL_INSTANCE));
  CMOCK_SysCtlVoltageEventConfig_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlVoltageEventConfig_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlVoltageEventConfig_CallInstance = CMock_Guts_MemChain(Mock.SysCtlVoltageEventConfig_CallInstance, cmock_guts_index);
  Mock.SysCtlVoltageEventConfig_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlVoltageEventConfig(cmock_call_instance, ui32Config);
}

void SysCtlVoltageEventConfig_AddCallback(CMOCK_SysCtlVoltageEventConfig_CALLBACK Callback)
{
  Mock.SysCtlVoltageEventConfig_IgnoreBool = (char)0;
  Mock.SysCtlVoltageEventConfig_CallbackBool = (char)1;
  Mock.SysCtlVoltageEventConfig_CallbackFunctionPointer = Callback;
}

void SysCtlVoltageEventConfig_Stub(CMOCK_SysCtlVoltageEventConfig_CALLBACK Callback)
{
  Mock.SysCtlVoltageEventConfig_IgnoreBool = (char)0;
  Mock.SysCtlVoltageEventConfig_CallbackBool = (char)0;
  Mock.SysCtlVoltageEventConfig_CallbackFunctionPointer = Callback;
}

uint32_t SysCtlVoltageEventStatus(void)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlVoltageEventStatus_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlVoltageEventStatus);
  cmock_call_instance = (CMOCK_SysCtlVoltageEventStatus_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlVoltageEventStatus_CallInstance);
  Mock.SysCtlVoltageEventStatus_CallInstance = CMock_Guts_MemNext(Mock.SysCtlVoltageEventStatus_CallInstance);
  if (Mock.SysCtlVoltageEventStatus_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlVoltageEventStatus_FinalReturn;
    Mock.SysCtlVoltageEventStatus_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlVoltageEventStatus_CallbackBool &&
      Mock.SysCtlVoltageEventStatus_CallbackFunctionPointer != NULL)
  {
    uint32_t cmock_cb_ret = Mock.SysCtlVoltageEventStatus_CallbackFunctionPointer(Mock.SysCtlVoltageEventStatus_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  if (Mock.SysCtlVoltageEventStatus_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlVoltageEventStatus_CallbackFunctionPointer(Mock.SysCtlVoltageEventStatus_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void SysCtlVoltageEventStatus_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlVoltageEventStatus_CALL_INSTANCE));
  CMOCK_SysCtlVoltageEventStatus_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlVoltageEventStatus_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlVoltageEventStatus_CallInstance = CMock_Guts_MemChain(Mock.SysCtlVoltageEventStatus_CallInstance, cmock_guts_index);
  Mock.SysCtlVoltageEventStatus_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlVoltageEventStatus_IgnoreBool = (char)1;
}

void SysCtlVoltageEventStatus_CMockStopIgnore(void)
{
  if(Mock.SysCtlVoltageEventStatus_IgnoreBool)
    Mock.SysCtlVoltageEventStatus_CallInstance = CMock_Guts_MemNext(Mock.SysCtlVoltageEventStatus_CallInstance);
  Mock.SysCtlVoltageEventStatus_IgnoreBool = (char)0;
}

void SysCtlVoltageEventStatus_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlVoltageEventStatus_CALL_INSTANCE));
  CMOCK_SysCtlVoltageEventStatus_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlVoltageEventStatus_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlVoltageEventStatus_CallInstance = CMock_Guts_MemChain(Mock.SysCtlVoltageEventStatus_CallInstance, cmock_guts_index);
  Mock.SysCtlVoltageEventStatus_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlVoltageEventStatus_AddCallback(CMOCK_SysCtlVoltageEventStatus_CALLBACK Callback)
{
  Mock.SysCtlVoltageEventStatus_IgnoreBool = (char)0;
  Mock.SysCtlVoltageEventStatus_CallbackBool = (char)1;
  Mock.SysCtlVoltageEventStatus_CallbackFunctionPointer = Callback;
}

void SysCtlVoltageEventStatus_Stub(CMOCK_SysCtlVoltageEventStatus_CALLBACK Callback)
{
  Mock.SysCtlVoltageEventStatus_IgnoreBool = (char)0;
  Mock.SysCtlVoltageEventStatus_CallbackBool = (char)0;
  Mock.SysCtlVoltageEventStatus_CallbackFunctionPointer = Callback;
}

void SysCtlVoltageEventClear(uint32_t ui32Status)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlVoltageEventClear_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlVoltageEventClear);
  cmock_call_instance = (CMOCK_SysCtlVoltageEventClear_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlVoltageEventClear_CallInstance);
  Mock.SysCtlVoltageEventClear_CallInstance = CMock_Guts_MemNext(Mock.SysCtlVoltageEventClear_CallInstance);
  if (Mock.SysCtlVoltageEventClear_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    return;
  }
  if (!Mock.SysCtlVoltageEventClear_CallbackBool &&
      Mock.SysCtlVoltageEventClear_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlVoltageEventClear_CallbackFunctionPointer(ui32Status, Mock.SysCtlVoltageEventClear_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlVoltageEventClear,CMockString_ui32Status);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Status, ui32Status, cmock_line, CMockStringMismatch);
  }
  if (Mock.SysCtlVoltageEventClear_CallbackFunctionPointer != NULL)
  {
    Mock.SysCtlVoltageEventClear_CallbackFunctionPointer(ui32Status, Mock.SysCtlVoltageEventClear_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
}

void CMockExpectParameters_SysCtlVoltageEventClear(CMOCK_SysCtlVoltageEventClear_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Status);
void CMockExpectParameters_SysCtlVoltageEventClear(CMOCK_SysCtlVoltageEventClear_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Status)
{
  cmock_call_instance->Expected_ui32Status = ui32Status;
}

void SysCtlVoltageEventClear_CMockIgnore(void)
{
  Mock.SysCtlVoltageEventClear_IgnoreBool = (char)1;
}

void SysCtlVoltageEventClear_CMockStopIgnore(void)
{
  Mock.SysCtlVoltageEventClear_IgnoreBool = (char)0;
}

void SysCtlVoltageEventClear_CMockExpect(UNITY_LINE_TYPE cmock_line, uint32_t ui32Status)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlVoltageEventClear_CALL_INSTANCE));
  CMOCK_SysCtlVoltageEventClear_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlVoltageEventClear_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlVoltageEventClear_CallInstance = CMock_Guts_MemChain(Mock.SysCtlVoltageEventClear_CallInstance, cmock_guts_index);
  Mock.SysCtlVoltageEventClear_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlVoltageEventClear(cmock_call_instance, ui32Status);
}

void SysCtlVoltageEventClear_AddCallback(CMOCK_SysCtlVoltageEventClear_CALLBACK Callback)
{
  Mock.SysCtlVoltageEventClear_IgnoreBool = (char)0;
  Mock.SysCtlVoltageEventClear_CallbackBool = (char)1;
  Mock.SysCtlVoltageEventClear_CallbackFunctionPointer = Callback;
}

void SysCtlVoltageEventClear_Stub(CMOCK_SysCtlVoltageEventClear_CALLBACK Callback)
{
  Mock.SysCtlVoltageEventClear_IgnoreBool = (char)0;
  Mock.SysCtlVoltageEventClear_CallbackBool = (char)0;
  Mock.SysCtlVoltageEventClear_CallbackFunctionPointer = Callback;
}

bool SysCtlVCOGet(uint32_t ui32Crystal, uint32_t* pui32VCOFrequency)
{
  UNITY_LINE_TYPE cmock_line = TEST_LINE_NUM;
  CMOCK_SysCtlVCOGet_CALL_INSTANCE* cmock_call_instance;
  UNITY_SET_DETAIL(CMockString_SysCtlVCOGet);
  cmock_call_instance = (CMOCK_SysCtlVCOGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(Mock.SysCtlVCOGet_CallInstance);
  Mock.SysCtlVCOGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlVCOGet_CallInstance);
  if (Mock.SysCtlVCOGet_IgnoreBool)
  {
    UNITY_CLR_DETAILS();
    if (cmock_call_instance == NULL)
      return Mock.SysCtlVCOGet_FinalReturn;
    Mock.SysCtlVCOGet_FinalReturn = cmock_call_instance->ReturnVal;
    return cmock_call_instance->ReturnVal;
  }
  if (!Mock.SysCtlVCOGet_CallbackBool &&
      Mock.SysCtlVCOGet_CallbackFunctionPointer != NULL)
  {
    bool cmock_cb_ret = Mock.SysCtlVCOGet_CallbackFunctionPointer(ui32Crystal, pui32VCOFrequency, Mock.SysCtlVCOGet_CallbackCalls++);
    UNITY_CLR_DETAILS();
    return cmock_cb_ret;
  }
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringCalledMore);
  cmock_line = cmock_call_instance->LineNumber;
  if (cmock_call_instance->CallOrder > ++GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledEarly);
  if (cmock_call_instance->CallOrder < GlobalVerifyOrder)
    UNITY_TEST_FAIL(cmock_line, CMockStringCalledLate);
  {
    UNITY_SET_DETAILS(CMockString_SysCtlVCOGet,CMockString_ui32Crystal);
    UNITY_TEST_ASSERT_EQUAL_HEX32(cmock_call_instance->Expected_ui32Crystal, ui32Crystal, cmock_line, CMockStringMismatch);
  }
  {
    UNITY_SET_DETAILS(CMockString_SysCtlVCOGet,CMockString_pui32VCOFrequency);
    if (cmock_call_instance->Expected_pui32VCOFrequency == NULL)
      { UNITY_TEST_ASSERT_NULL(pui32VCOFrequency, cmock_line, CMockStringExpNULL); }
    else
      { UNITY_TEST_ASSERT_EQUAL_HEX32_ARRAY(cmock_call_instance->Expected_pui32VCOFrequency, pui32VCOFrequency, 1, cmock_line, CMockStringMismatch); }
  }
  if (Mock.SysCtlVCOGet_CallbackFunctionPointer != NULL)
  {
    cmock_call_instance->ReturnVal = Mock.SysCtlVCOGet_CallbackFunctionPointer(ui32Crystal, pui32VCOFrequency, Mock.SysCtlVCOGet_CallbackCalls++);
  }
  UNITY_CLR_DETAILS();
  return cmock_call_instance->ReturnVal;
}

void CMockExpectParameters_SysCtlVCOGet(CMOCK_SysCtlVCOGet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Crystal, uint32_t* pui32VCOFrequency);
void CMockExpectParameters_SysCtlVCOGet(CMOCK_SysCtlVCOGet_CALL_INSTANCE* cmock_call_instance, uint32_t ui32Crystal, uint32_t* pui32VCOFrequency)
{
  cmock_call_instance->Expected_ui32Crystal = ui32Crystal;
  cmock_call_instance->Expected_pui32VCOFrequency = pui32VCOFrequency;
}

void SysCtlVCOGet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlVCOGet_CALL_INSTANCE));
  CMOCK_SysCtlVCOGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlVCOGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlVCOGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlVCOGet_CallInstance, cmock_guts_index);
  Mock.SysCtlVCOGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->ReturnVal = cmock_to_return;
  Mock.SysCtlVCOGet_IgnoreBool = (char)1;
}

void SysCtlVCOGet_CMockStopIgnore(void)
{
  if(Mock.SysCtlVCOGet_IgnoreBool)
    Mock.SysCtlVCOGet_CallInstance = CMock_Guts_MemNext(Mock.SysCtlVCOGet_CallInstance);
  Mock.SysCtlVCOGet_IgnoreBool = (char)0;
}

void SysCtlVCOGet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t ui32Crystal, uint32_t* pui32VCOFrequency, bool cmock_to_return)
{
  CMOCK_MEM_INDEX_TYPE cmock_guts_index = CMock_Guts_MemNew(sizeof(CMOCK_SysCtlVCOGet_CALL_INSTANCE));
  CMOCK_SysCtlVCOGet_CALL_INSTANCE* cmock_call_instance = (CMOCK_SysCtlVCOGet_CALL_INSTANCE*)CMock_Guts_GetAddressFor(cmock_guts_index);
  UNITY_TEST_ASSERT_NOT_NULL(cmock_call_instance, cmock_line, CMockStringOutOfMemory);
  memset(cmock_call_instance, 0, sizeof(*cmock_call_instance));
  Mock.SysCtlVCOGet_CallInstance = CMock_Guts_MemChain(Mock.SysCtlVCOGet_CallInstance, cmock_guts_index);
  Mock.SysCtlVCOGet_IgnoreBool = (char)0;
  cmock_call_instance->LineNumber = cmock_line;
  cmock_call_instance->CallOrder = ++GlobalExpectCount;
  CMockExpectParameters_SysCtlVCOGet(cmock_call_instance, ui32Crystal, pui32VCOFrequency);
  cmock_call_instance->ReturnVal = cmock_to_return;
}

void SysCtlVCOGet_AddCallback(CMOCK_SysCtlVCOGet_CALLBACK Callback)
{
  Mock.SysCtlVCOGet_IgnoreBool = (char)0;
  Mock.SysCtlVCOGet_CallbackBool = (char)1;
  Mock.SysCtlVCOGet_CallbackFunctionPointer = Callback;
}

void SysCtlVCOGet_Stub(CMOCK_SysCtlVCOGet_CALLBACK Callback)
{
  Mock.SysCtlVCOGet_IgnoreBool = (char)0;
  Mock.SysCtlVCOGet_CallbackBool = (char)0;
  Mock.SysCtlVCOGet_CallbackFunctionPointer = Callback;
}

