/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_LED_H
#define _MOCK_LED_H

#include "unity.h"
#include <stdbool.h>
#include <stdint.h>
#include "Led.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_Led_Init(void);
void mock_Led_Destroy(void);
void mock_Led_Verify(void);




#define Led_on_IgnoreAndReturn(cmock_retval) Led_on_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void Led_on_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, uint32_t cmock_to_return);
#define Led_on_StopIgnore() Led_on_CMockStopIgnore()
void Led_on_CMockStopIgnore(void);
#define Led_on_ExpectAndReturn(index, cmock_retval) Led_on_CMockExpectAndReturn(__LINE__, index, cmock_retval)
void Led_on_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, uint8_t index, uint32_t cmock_to_return);
typedef uint32_t (* CMOCK_Led_on_CALLBACK)(uint8_t index, int cmock_num_calls);
void Led_on_AddCallback(CMOCK_Led_on_CALLBACK Callback);
void Led_on_Stub(CMOCK_Led_on_CALLBACK Callback);
#define Led_on_StubWithCallback Led_on_Stub
#define Led_off_Ignore() Led_off_CMockIgnore()
void Led_off_CMockIgnore(void);
#define Led_off_StopIgnore() Led_off_CMockStopIgnore()
void Led_off_CMockStopIgnore(void);
#define Led_off_Expect(index) Led_off_CMockExpect(__LINE__, index)
void Led_off_CMockExpect(UNITY_LINE_TYPE cmock_line, uint8_t index);
typedef void (* CMOCK_Led_off_CALLBACK)(uint8_t index, int cmock_num_calls);
void Led_off_AddCallback(CMOCK_Led_off_CALLBACK Callback);
void Led_off_Stub(CMOCK_Led_off_CALLBACK Callback);
#define Led_off_StubWithCallback Led_off_Stub

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
